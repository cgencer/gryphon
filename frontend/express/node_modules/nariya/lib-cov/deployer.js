/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['deployer.js']) {
  _$jscoverage['deployer.js'] = [];
  _$jscoverage['deployer.js'][14] = 0;
  _$jscoverage['deployer.js'][15] = 0;
  _$jscoverage['deployer.js'][16] = 0;
  _$jscoverage['deployer.js'][17] = 0;
  _$jscoverage['deployer.js'][18] = 0;
  _$jscoverage['deployer.js'][20] = 0;
  _$jscoverage['deployer.js'][22] = 0;
  _$jscoverage['deployer.js'][24] = 0;
  _$jscoverage['deployer.js'][32] = 0;
  _$jscoverage['deployer.js'][34] = 0;
  _$jscoverage['deployer.js'][35] = 0;
  _$jscoverage['deployer.js'][36] = 0;
  _$jscoverage['deployer.js'][37] = 0;
  _$jscoverage['deployer.js'][39] = 0;
  _$jscoverage['deployer.js'][42] = 0;
  _$jscoverage['deployer.js'][43] = 0;
  _$jscoverage['deployer.js'][44] = 0;
  _$jscoverage['deployer.js'][46] = 0;
  _$jscoverage['deployer.js'][47] = 0;
  _$jscoverage['deployer.js'][48] = 0;
  _$jscoverage['deployer.js'][51] = 0;
  _$jscoverage['deployer.js'][52] = 0;
  _$jscoverage['deployer.js'][56] = 0;
  _$jscoverage['deployer.js'][58] = 0;
  _$jscoverage['deployer.js'][60] = 0;
  _$jscoverage['deployer.js'][61] = 0;
  _$jscoverage['deployer.js'][64] = 0;
  _$jscoverage['deployer.js'][65] = 0;
  _$jscoverage['deployer.js'][69] = 0;
  _$jscoverage['deployer.js'][71] = 0;
  _$jscoverage['deployer.js'][73] = 0;
  _$jscoverage['deployer.js'][74] = 0;
  _$jscoverage['deployer.js'][76] = 0;
  _$jscoverage['deployer.js'][78] = 0;
  _$jscoverage['deployer.js'][80] = 0;
  _$jscoverage['deployer.js'][81] = 0;
  _$jscoverage['deployer.js'][82] = 0;
  _$jscoverage['deployer.js'][84] = 0;
  _$jscoverage['deployer.js'][87] = 0;
  _$jscoverage['deployer.js'][88] = 0;
  _$jscoverage['deployer.js'][92] = 0;
  _$jscoverage['deployer.js'][94] = 0;
  _$jscoverage['deployer.js'][96] = 0;
  _$jscoverage['deployer.js'][97] = 0;
  _$jscoverage['deployer.js'][100] = 0;
  _$jscoverage['deployer.js'][101] = 0;
  _$jscoverage['deployer.js'][105] = 0;
  _$jscoverage['deployer.js'][107] = 0;
  _$jscoverage['deployer.js'][109] = 0;
  _$jscoverage['deployer.js'][110] = 0;
  _$jscoverage['deployer.js'][113] = 0;
  _$jscoverage['deployer.js'][114] = 0;
  _$jscoverage['deployer.js'][120] = 0;
  _$jscoverage['deployer.js'][121] = 0;
  _$jscoverage['deployer.js'][133] = 0;
  _$jscoverage['deployer.js'][135] = 0;
  _$jscoverage['deployer.js'][136] = 0;
  _$jscoverage['deployer.js'][138] = 0;
  _$jscoverage['deployer.js'][139] = 0;
  _$jscoverage['deployer.js'][140] = 0;
  _$jscoverage['deployer.js'][143] = 0;
  _$jscoverage['deployer.js'][144] = 0;
  _$jscoverage['deployer.js'][148] = 0;
  _$jscoverage['deployer.js'][150] = 0;
  _$jscoverage['deployer.js'][151] = 0;
  _$jscoverage['deployer.js'][153] = 0;
  _$jscoverage['deployer.js'][164] = 0;
  _$jscoverage['deployer.js'][166] = 0;
  _$jscoverage['deployer.js'][167] = 0;
  _$jscoverage['deployer.js'][169] = 0;
  _$jscoverage['deployer.js'][170] = 0;
  _$jscoverage['deployer.js'][171] = 0;
  _$jscoverage['deployer.js'][174] = 0;
  _$jscoverage['deployer.js'][175] = 0;
  _$jscoverage['deployer.js'][179] = 0;
  _$jscoverage['deployer.js'][181] = 0;
  _$jscoverage['deployer.js'][182] = 0;
  _$jscoverage['deployer.js'][184] = 0;
  _$jscoverage['deployer.js'][194] = 0;
  _$jscoverage['deployer.js'][196] = 0;
  _$jscoverage['deployer.js'][198] = 0;
  _$jscoverage['deployer.js'][199] = 0;
  _$jscoverage['deployer.js'][201] = 0;
  _$jscoverage['deployer.js'][210] = 0;
  _$jscoverage['deployer.js'][212] = 0;
  _$jscoverage['deployer.js'][214] = 0;
  _$jscoverage['deployer.js'][216] = 0;
  _$jscoverage['deployer.js'][217] = 0;
  _$jscoverage['deployer.js'][218] = 0;
  _$jscoverage['deployer.js'][219] = 0;
  _$jscoverage['deployer.js'][223] = 0;
  _$jscoverage['deployer.js'][226] = 0;
}
_$jscoverage['deployer.js'][14]++;
var fs = require("fs");
_$jscoverage['deployer.js'][15]++;
var winstoon = require("winstoon");
_$jscoverage['deployer.js'][16]++;
var logger = winstoon.createLogger("deployer");
_$jscoverage['deployer.js'][17]++;
var exec = require("child_process").exec;
_$jscoverage['deployer.js'][18]++;
var path = require("path");
_$jscoverage['deployer.js'][20]++;
module.exports = Deployer;
_$jscoverage['deployer.js'][22]++;
function Deployer() {
  _$jscoverage['deployer.js'][24]++;
  var self = this;
  _$jscoverage['deployer.js'][32]++;
  this.deploy = (function (repoInfo, callback) {
  _$jscoverage['deployer.js'][34]++;
  var appname = repoInfo.name;
  _$jscoverage['deployer.js'][35]++;
  var location = repoInfo.location;
  _$jscoverage['deployer.js'][36]++;
  var logpath = repoInfo.logpath;
  _$jscoverage['deployer.js'][37]++;
  var startScript = repoInfo.startScript;
  _$jscoverage['deployer.js'][39]++;
  logger.info("deploying app", {location: location, appname: appname});
  _$jscoverage['deployer.js'][42]++;
  var noDeployFilePath = path.resolve(location, "NO_DEPLOY");
  _$jscoverage['deployer.js'][43]++;
  logger.info("checking for NO_DEPLOY");
  _$jscoverage['deployer.js'][44]++;
  self.fileExists(noDeployFilePath, (function (exists) {
  _$jscoverage['deployer.js'][46]++;
  if (exists) {
    _$jscoverage['deployer.js'][47]++;
    logger.info("NO_DEPLOY exists, so abort");
    _$jscoverage['deployer.js'][48]++;
    callback(null, false);
  }
  else {
    _$jscoverage['deployer.js'][51]++;
    logger.info("executing npm install");
    _$jscoverage['deployer.js'][52]++;
    self.executeIfExists(location, "package.json", "npm install", afterNpmInstalled);
  }
}));
  _$jscoverage['deployer.js'][56]++;
  function afterNpmInstalled(error, executed) {
    _$jscoverage['deployer.js'][58]++;
    if (! error) {
      _$jscoverage['deployer.js'][60]++;
      logger.info("executing pre.sh");
      _$jscoverage['deployer.js'][61]++;
      self.executeIfExists(location, "pre.sh", "sh pre.sh", afterPreShExecuted);
    }
    else {
      _$jscoverage['deployer.js'][64]++;
      logger.error("error on npm install", {error: error});
      _$jscoverage['deployer.js'][65]++;
      callback(wrapError("NPM_INSTALL_ERROR", error));
    }
}
  _$jscoverage['deployer.js'][69]++;
  function afterPreShExecuted(error, executed) {
    _$jscoverage['deployer.js'][71]++;
    if (! startScript) {
      _$jscoverage['deployer.js'][73]++;
      logger.info("bypassing starting apps - node startScript", {appname: appname});
      _$jscoverage['deployer.js'][74]++;
      afterAppStarted(null, false);
    }
    else {
      _$jscoverage['deployer.js'][76]++;
      if (! error) {
        _$jscoverage['deployer.js'][78]++;
        logger.info("starting the application with start.js");
        _$jscoverage['deployer.js'][80]++;
        var outLogs = path.resolve(logpath, appname + ".log");
        _$jscoverage['deployer.js'][81]++;
        var errLogs = path.resolve(logpath, appname + ".err.log");
        _$jscoverage['deployer.js'][82]++;
        var appStartCommad = "forever stop " + startScript + " && SL_NAME=" + appname + " forever start -o " + outLogs + " -e " + errLogs + " -a " + startScript;
        _$jscoverage['deployer.js'][84]++;
        self.executeIfExists(location, startScript, appStartCommad, afterAppStarted);
      }
      else {
        _$jscoverage['deployer.js'][87]++;
        logger.error("error on executing pre.sh", {error: error});
        _$jscoverage['deployer.js'][88]++;
        callback(wrapError("PRE_SH_ERROR", error));
      }
    }
}
  _$jscoverage['deployer.js'][92]++;
  function afterAppStarted(error, executed) {
    _$jscoverage['deployer.js'][94]++;
    if (! error) {
      _$jscoverage['deployer.js'][96]++;
      logger.info("executing post.sh");
      _$jscoverage['deployer.js'][97]++;
      self.executeIfExists(location, "post.sh", "sh post.sh", afterPostShExecuted);
    }
    else {
      _$jscoverage['deployer.js'][100]++;
      logger.error("error on starting the app", {error: error});
      _$jscoverage['deployer.js'][101]++;
      callback(wrapError("APP_START_ERROR", error));
    }
}
  _$jscoverage['deployer.js'][105]++;
  function afterPostShExecuted(error, executed) {
    _$jscoverage['deployer.js'][107]++;
    if (! error) {
      _$jscoverage['deployer.js'][109]++;
      logger.info("deployment completed", {appname: appname, location: location});
      _$jscoverage['deployer.js'][110]++;
      callback();
    }
    else {
      _$jscoverage['deployer.js'][113]++;
      logger.error("error on executing post.sh", {error: error});
      _$jscoverage['deployer.js'][114]++;
      callback(wrapError("POST_SH_ERROR", error));
    }
}
});
  _$jscoverage['deployer.js'][120]++;
  function wrapError(id, error) {
    _$jscoverage['deployer.js'][121]++;
    return ({code: id, message: error.message});
}
  _$jscoverage['deployer.js'][133]++;
  this.executeIfExists = (function executeIfExists(cwd, file, command, callback) {
  _$jscoverage['deployer.js'][135]++;
  var filepath = path.resolve(cwd, file);
  _$jscoverage['deployer.js'][136]++;
  self.fileExists(filepath, (function (exists) {
  _$jscoverage['deployer.js'][138]++;
  if (exists) {
    _$jscoverage['deployer.js'][139]++;
    logger.debug("executing command", {command: command});
    _$jscoverage['deployer.js'][140]++;
    exec(command, {cwd: cwd}, afterExecuted);
  }
  else {
    _$jscoverage['deployer.js'][143]++;
    logger.debug("file not exits - abort command", {file: file, command: command});
    _$jscoverage['deployer.js'][144]++;
    callback(null, false);
  }
}));
  _$jscoverage['deployer.js'][148]++;
  function afterExecuted(err, stdout, stderr) {
    _$jscoverage['deployer.js'][150]++;
    if (err) {
      _$jscoverage['deployer.js'][151]++;
      callback(err, false);
    }
    else {
      _$jscoverage['deployer.js'][153]++;
      callback(null, true);
    }
}
});
  _$jscoverage['deployer.js'][164]++;
  this.executeIfNotExists = (function executeIfExists(cwd, file, command, callback) {
  _$jscoverage['deployer.js'][166]++;
  var filepath = path.resolve(cwd, file);
  _$jscoverage['deployer.js'][167]++;
  self.fileExists(filepath, (function (exists) {
  _$jscoverage['deployer.js'][169]++;
  if (! exists) {
    _$jscoverage['deployer.js'][170]++;
    logger.debug("executing command", {command: command});
    _$jscoverage['deployer.js'][171]++;
    exec(command, {cwd: cwd}, afterExecuted);
  }
  else {
    _$jscoverage['deployer.js'][174]++;
    logger.debug("file not exits - abort command", {file: file, command: command});
    _$jscoverage['deployer.js'][175]++;
    callback(null, false);
  }
}));
  _$jscoverage['deployer.js'][179]++;
  function afterExecuted(err, stdout, stderr) {
    _$jscoverage['deployer.js'][181]++;
    if (err) {
      _$jscoverage['deployer.js'][182]++;
      callback(err, false);
    }
    else {
      _$jscoverage['deployer.js'][184]++;
      callback(null, true);
    }
}
});
  _$jscoverage['deployer.js'][194]++;
  this.fileExists = (function fileExists(filepath, callback) {
  _$jscoverage['deployer.js'][196]++;
  fs.lstat(filepath, (function (err, fileInfo) {
  _$jscoverage['deployer.js'][198]++;
  if (! err) {
    _$jscoverage['deployer.js'][199]++;
    callback(true);
  }
  else {
    _$jscoverage['deployer.js'][201]++;
    callback(false);
  }
}));
});
  _$jscoverage['deployer.js'][210]++;
  this.findStartScript = (function (location, callback) {
  _$jscoverage['deployer.js'][212]++;
  fs.readdir(location, (function (err, files) {
  _$jscoverage['deployer.js'][214]++;
  if (! err) {
    _$jscoverage['deployer.js'][216]++;
    for (var index in files) {
      _$jscoverage['deployer.js'][217]++;
      var file = files[index];
      _$jscoverage['deployer.js'][218]++;
      if (file.match(/^start.*\.js$/)) {
        _$jscoverage['deployer.js'][219]++;
        return callback(null, file);
      }
}
    _$jscoverage['deployer.js'][223]++;
    return callback();
  }
  else {
    _$jscoverage['deployer.js'][226]++;
    callback(err);
  }
}));
});
}
_$jscoverage['deployer.js'].source = ["/**","","\tDeployer ","\t========","","\tcheck for NO_DEPLOY file","\tnpm install","\tExecute `pre.sh`","\tExecute `start.js`","\tExecute\t`post.sh`","","*/","","var fs = require('fs');","var winstoon = require('winstoon');","var logger = winstoon.createLogger('deployer');","var exec = require('child_process').exec;","var path = require('path');","","module.exports = Deployer;","","function Deployer() {","\t","\tvar self = this;","","\t/**","\t\tDeploy the app in the location","\t\treturn as an callback","\t\t\tfunction(error, deployed: boolean)","\t\t\t\tdeployed would get false if NO_DEPLOY file exists without an error","\t*/","\tthis.deploy = function(repoInfo, callback) {","","\t\tvar appname = repoInfo.name;","\t\tvar location = repoInfo.location;","\t\tvar logpath = repoInfo.logpath;","\t\tvar startScript = repoInfo.startScript;","\t\t","\t\tlogger.info('deploying app', {location: location, appname: appname});","","\t\t//check for NO_DEPLOY file","\t\tvar noDeployFilePath = path.resolve(location, 'NO_DEPLOY');","\t\tlogger.info('checking for NO_DEPLOY');","\t\tself.fileExists(noDeployFilePath, function(exists) {","\t\t\t","\t\t\tif(exists) {","\t\t\t\tlogger.info('NO_DEPLOY exists, so abort');","\t\t\t\tcallback(null, false);","\t\t\t} else {","\t\t\t\t//npm install","\t\t\t\tlogger.info('executing npm install');","\t\t\t\tself.executeIfExists(location, 'package.json', 'npm install', afterNpmInstalled);","\t\t\t}","\t\t});","","\t\tfunction afterNpmInstalled(error, executed) {","\t\t\t","\t\t\tif(!error) {","\t\t\t\t//execute pre.sh","\t\t\t\tlogger.info('executing pre.sh');","\t\t\t\tself.executeIfExists(location, 'pre.sh', 'sh pre.sh', afterPreShExecuted);","\t\t\t} else {","\t\t\t\t","\t\t\t\tlogger.error('error on npm install', {error: error});","\t\t\t\tcallback(wrapError('NPM_INSTALL_ERROR', error));","\t\t\t}","\t\t}","","\t\tfunction afterPreShExecuted(error, executed) {","\t\t\t","\t\t\tif(!startScript) {","\t\t\t\t//if there is no start script we bypass the execution of it.","\t\t\t\tlogger.info(\"bypassing starting apps - node startScript\", {appname: appname});","\t\t\t\tafterAppStarted(null, false);","","\t\t\t} else if (!error) {","\t\t\t\t//starting the application (start.js)","\t\t\t\tlogger.info('starting the application with start.js');","","\t\t\t\tvar outLogs = path.resolve(logpath, appname + '.log');","\t\t\t\tvar errLogs = path.resolve(logpath, appname + '.err.log');","\t\t\t\tvar appStartCommad = 'forever stop ' + startScript + ' &amp;&amp; SL_NAME=' + appname + ' forever start -o ' + outLogs + ' -e ' + errLogs + ' -a ' + startScript;","","\t\t\t\tself.executeIfExists(location, startScript, appStartCommad, afterAppStarted);","\t\t\t} else {","\t\t\t\t","\t\t\t\tlogger.error('error on executing pre.sh', {error: error});","\t\t\t\tcallback(wrapError('PRE_SH_ERROR', error));","\t\t\t}","\t\t}","","\t\tfunction afterAppStarted(error, executed) {","\t\t\t","\t\t\tif(!error) {","\t\t\t\t//nexecuting `post.sh`","\t\t\t\tlogger.info('executing post.sh');","\t\t\t\tself.executeIfExists(location, 'post.sh', 'sh post.sh', afterPostShExecuted);","\t\t\t} else {","\t\t\t\t","\t\t\t\tlogger.error('error on starting the app', {error: error});","\t\t\t\tcallback(wrapError('APP_START_ERROR', error));","\t\t\t}","\t\t}","","\t\tfunction afterPostShExecuted(error, executed) {","\t\t\t","\t\t\tif(!error) {","\t\t\t\t//total deployment succeded","\t\t\t\tlogger.info('deployment completed', {appname: appname, location: location});","\t\t\t\tcallback();","\t\t\t} else {","\t\t\t\t","\t\t\t\tlogger.error('error on executing post.sh', {error: error});","\t\t\t\tcallback(wrapError('POST_SH_ERROR', error));","\t\t\t}","\t\t}","","\t};","","\tfunction wrapError(id, error) {","\t\treturn {","\t\t\tcode: id,","\t\t\tmessage: error.message","\t\t};","\t}","","\t/**","\t\tExecute the given @command if @file exists","\t\tall these actions happens at the directory declared on @cwd","\t\treturn as an callback","\t\t\tfunction(error, executed:boolean);","\t*/","\tthis.executeIfExists = function executeIfExists(cwd, file, command, callback) {","\t\t","\t\tvar filepath = path.resolve(cwd, file);","\t\tself.fileExists(filepath, function(exists) {","\t\t\t","\t\t\tif(exists) {","\t\t\t\tlogger.debug('executing command', {command: command});","\t\t\t\texec(command, { cwd: cwd }, afterExecuted);","\t\t\t} else {","\t\t\t\t//let the use knows via a callback","\t\t\t\tlogger.debug('file not exits - abort command', {file: file, command: command});","\t\t\t\tcallback(null, false);","\t\t\t}","\t\t});\t\t","","\t\tfunction afterExecuted(err, stdout, stderr) {","\t\t\t","\t\t\tif(err) {","\t\t\t\tcallback(err, false);","\t\t\t} else {","\t\t\t\tcallback(null, true);","\t\t\t}","\t\t}","\t}","","\t/**","\t\tExecute the given @command if @file not exists","\t\tall these actions happens at the directory declared on @cwd","\t\treturn as an callback","\t\t\tfunction(error, executed:boolean);","\t*/","\tthis.executeIfNotExists = function executeIfExists(cwd, file, command, callback) {","\t\t","\t\tvar filepath = path.resolve(cwd, file);","\t\tself.fileExists(filepath, function(exists) {","\t\t\t","\t\t\tif(!exists) {","\t\t\t\tlogger.debug('executing command', {command: command});","\t\t\t\texec(command, { cwd: cwd }, afterExecuted);","\t\t\t} else {","\t\t\t\t//let the use knows via a callback","\t\t\t\tlogger.debug('file not exits - abort command', {file: file, command: command});","\t\t\t\tcallback(null, false);","\t\t\t}","\t\t});\t\t","","\t\tfunction afterExecuted(err, stdout, stderr) {","\t\t\t","\t\t\tif(err) {","\t\t\t\tcallback(err, false);","\t\t\t} else {","\t\t\t\tcallback(null, true);","\t\t\t}","\t\t}","\t}","","\t/*","\t\tcheck whether a given file is exists or not","\t\treturn as an callback","\t\t\tfunction(boolean);","\t*/","\tthis.fileExists = function fileExists(filepath, callback) {","\t\t","\t\tfs.lstat(filepath, function(err, fileInfo) {","\t\t\t","\t\t\tif(!err) {","\t\t\t\tcallback(true);\t","\t\t\t} else {","\t\t\t\tcallback(false);","\t\t\t}","\t\t});","\t}","","\t/**","\t\tFind the valid startScript to start with node","\t\tit should match /^start.*\\.js$/","\t*/","\tthis.findStartScript =  function(location, callback) {","\t\t","\t\tfs.readdir(location, function(err, files) {","\t\t\t","\t\t\tif(!err) {","\t\t\t\t","\t\t\t\tfor(var index in files) {","\t\t\t\t\tvar file = files[index];","\t\t\t\t\tif(file.match(/^start.*\\.js$/)) {","\t\t\t\t\t\treturn callback(null, file);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\t//if no one selected","\t\t\t\treturn callback();","","\t\t\t} else {","\t\t\t\tcallback(err);","\t\t\t}","\t\t});","\t};","}"];
