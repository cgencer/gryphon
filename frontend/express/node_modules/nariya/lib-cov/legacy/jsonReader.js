/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['legacy/jsonReader.js']) {
  _$jscoverage['legacy/jsonReader.js'] = [];
  _$jscoverage['legacy/jsonReader.js'][1] = 0;
  _$jscoverage['legacy/jsonReader.js'][2] = 0;
  _$jscoverage['legacy/jsonReader.js'][3] = 0;
  _$jscoverage['legacy/jsonReader.js'][11] = 0;
  _$jscoverage['legacy/jsonReader.js'][13] = 0;
  _$jscoverage['legacy/jsonReader.js'][14] = 0;
  _$jscoverage['legacy/jsonReader.js'][16] = 0;
  _$jscoverage['legacy/jsonReader.js'][18] = 0;
  _$jscoverage['legacy/jsonReader.js'][19] = 0;
  _$jscoverage['legacy/jsonReader.js'][20] = 0;
  _$jscoverage['legacy/jsonReader.js'][22] = 0;
  _$jscoverage['legacy/jsonReader.js'][23] = 0;
  _$jscoverage['legacy/jsonReader.js'][26] = 0;
  _$jscoverage['legacy/jsonReader.js'][27] = 0;
}
_$jscoverage['legacy/jsonReader.js'][1]++;
var path = require("path");
_$jscoverage['legacy/jsonReader.js'][2]++;
var fs = require("fs");
_$jscoverage['legacy/jsonReader.js'][3]++;
var logger = require("winstoon").createLogger("jsonReader");
_$jscoverage['legacy/jsonReader.js'][11]++;
module.exports = (function (jsonFilePath, callback) {
  _$jscoverage['legacy/jsonReader.js'][13]++;
  var file = path.resolve(jsonFilePath);
  _$jscoverage['legacy/jsonReader.js'][14]++;
  fs.readFile(file, "utf8", (function (err, data) {
  _$jscoverage['legacy/jsonReader.js'][16]++;
  if (! err) {
    _$jscoverage['legacy/jsonReader.js'][18]++;
    try {
      _$jscoverage['legacy/jsonReader.js'][19]++;
      var content = JSON.parse(data);
      _$jscoverage['legacy/jsonReader.js'][20]++;
      callback(null, content);
    }
    catch (parseError) {
      _$jscoverage['legacy/jsonReader.js'][22]++;
      logger.error("package.json parse error", {file: file, err: parseError});
      _$jscoverage['legacy/jsonReader.js'][23]++;
      callback(parseError);
    }
  }
  else {
    _$jscoverage['legacy/jsonReader.js'][26]++;
    logger.error("file not exists", {file: file, err: err});
    _$jscoverage['legacy/jsonReader.js'][27]++;
    callback(err);
  }
}));
});
_$jscoverage['legacy/jsonReader.js'].source = ["var path =  require('path');","var fs = require('fs');","var logger = require('winstoon').createLogger('jsonReader');","","/**","\tRead the JSON file in a given path and return the parsed content","\t@param jsonFilePath - path where JSON file exists","\t@parsed callback - return the response as the callback","\t\tfunction(err, packageJson) {}","*/","module.exports = function(jsonFilePath, callback) {","\t","\tvar file = path.resolve(jsonFilePath);","\tfs.readFile(file, 'utf8', function(err, data) {","\t\t","\t\tif(!err) {","\t\t\t","\t\t\ttry {","\t\t\t\tvar content = JSON.parse(data);","\t\t\t\tcallback(null, content);","\t\t\t} catch(parseError) {","\t\t\t\tlogger.error('package.json parse error', {file: file, err: parseError});","\t\t\t\tcallback(parseError);","\t\t\t}","\t\t} else {","\t\t\tlogger.error('file not exists', {file: file, err: err});","\t\t\tcallback(err);","\t\t}","\t});","};"];
