/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['legacy/plugins/email.js']) {
  _$jscoverage['legacy/plugins/email.js'] = [];
  _$jscoverage['legacy/plugins/email.js'][19] = 0;
  _$jscoverage['legacy/plugins/email.js'][20] = 0;
  _$jscoverage['legacy/plugins/email.js'][21] = 0;
  _$jscoverage['legacy/plugins/email.js'][22] = 0;
  _$jscoverage['legacy/plugins/email.js'][28] = 0;
  _$jscoverage['legacy/plugins/email.js'][30] = 0;
  _$jscoverage['legacy/plugins/email.js'][31] = 0;
  _$jscoverage['legacy/plugins/email.js'][33] = 0;
  _$jscoverage['legacy/plugins/email.js'][35] = 0;
  _$jscoverage['legacy/plugins/email.js'][37] = 0;
  _$jscoverage['legacy/plugins/email.js'][38] = 0;
  _$jscoverage['legacy/plugins/email.js'][41] = 0;
  _$jscoverage['legacy/plugins/email.js'][46] = 0;
  _$jscoverage['legacy/plugins/email.js'][52] = 0;
  _$jscoverage['legacy/plugins/email.js'][54] = 0;
  _$jscoverage['legacy/plugins/email.js'][57] = 0;
  _$jscoverage['legacy/plugins/email.js'][59] = 0;
  _$jscoverage['legacy/plugins/email.js'][60] = 0;
  _$jscoverage['legacy/plugins/email.js'][61] = 0;
  _$jscoverage['legacy/plugins/email.js'][62] = 0;
  _$jscoverage['legacy/plugins/email.js'][64] = 0;
  _$jscoverage['legacy/plugins/email.js'][65] = 0;
  _$jscoverage['legacy/plugins/email.js'][67] = 0;
  _$jscoverage['legacy/plugins/email.js'][73] = 0;
  _$jscoverage['legacy/plugins/email.js'][75] = 0;
  _$jscoverage['legacy/plugins/email.js'][76] = 0;
  _$jscoverage['legacy/plugins/email.js'][77] = 0;
  _$jscoverage['legacy/plugins/email.js'][78] = 0;
  _$jscoverage['legacy/plugins/email.js'][80] = 0;
  _$jscoverage['legacy/plugins/email.js'][82] = 0;
  _$jscoverage['legacy/plugins/email.js'][83] = 0;
  _$jscoverage['legacy/plugins/email.js'][85] = 0;
  _$jscoverage['legacy/plugins/email.js'][91] = 0;
  _$jscoverage['legacy/plugins/email.js'][93] = 0;
  _$jscoverage['legacy/plugins/email.js'][94] = 0;
  _$jscoverage['legacy/plugins/email.js'][95] = 0;
  _$jscoverage['legacy/plugins/email.js'][97] = 0;
  _$jscoverage['legacy/plugins/email.js'][99] = 0;
  _$jscoverage['legacy/plugins/email.js'][100] = 0;
  _$jscoverage['legacy/plugins/email.js'][102] = 0;
  _$jscoverage['legacy/plugins/email.js'][108] = 0;
  _$jscoverage['legacy/plugins/email.js'][110] = 0;
  _$jscoverage['legacy/plugins/email.js'][111] = 0;
  _$jscoverage['legacy/plugins/email.js'][112] = 0;
  _$jscoverage['legacy/plugins/email.js'][115] = 0;
  _$jscoverage['legacy/plugins/email.js'][116] = 0;
  _$jscoverage['legacy/plugins/email.js'][117] = 0;
  _$jscoverage['legacy/plugins/email.js'][119] = 0;
  _$jscoverage['legacy/plugins/email.js'][120] = 0;
  _$jscoverage['legacy/plugins/email.js'][123] = 0;
  _$jscoverage['legacy/plugins/email.js'][125] = 0;
}
_$jscoverage['legacy/plugins/email.js'][19]++;
var jsonReader = require("../jsonReader");
_$jscoverage['legacy/plugins/email.js'][20]++;
var path = require("path");
_$jscoverage['legacy/plugins/email.js'][21]++;
var logger = require("winstoon").createLogger("plugins/email");
_$jscoverage['legacy/plugins/email.js'][22]++;
var nodemailer = require("nodemailer");
_$jscoverage['legacy/plugins/email.js'][28]++;
exports.load = (function (packageJs, eventBus) {
  _$jscoverage['legacy/plugins/email.js'][30]++;
  var confFilePath = path.resolve(process.cwd(), "email.json");
  _$jscoverage['legacy/plugins/email.js'][31]++;
  jsonReader(confFilePath, (function (err, config) {
  _$jscoverage['legacy/plugins/email.js'][33]++;
  if (! err) {
    _$jscoverage['legacy/plugins/email.js'][35]++;
    if (config.smtp && config.me && config.receivers) {
      _$jscoverage['legacy/plugins/email.js'][37]++;
      logger.info("Email Plugin started");
      _$jscoverage['legacy/plugins/email.js'][38]++;
      startWaching(config);
    }
    else {
      _$jscoverage['legacy/plugins/email.js'][41]++;
      logger.error("Email plugin is not started due to invalid conf");
    }
  }
  else {
    _$jscoverage['legacy/plugins/email.js'][46]++;
    logger.error("Email Plugin is not started due to invalid conf file");
  }
}));
  _$jscoverage['legacy/plugins/email.js'][52]++;
  function startWaching(config) {
    _$jscoverage['legacy/plugins/email.js'][54]++;
    nodemailer.SMTP = config.smtp;
    _$jscoverage['legacy/plugins/email.js'][57]++;
    eventBus.on("notify.deployed", (function () {
  _$jscoverage['legacy/plugins/email.js'][59]++;
  logger.info("email for success deployment");
  _$jscoverage['legacy/plugins/email.js'][60]++;
  var title = "Deployment Succeeded";
  _$jscoverage['legacy/plugins/email.js'][61]++;
  var message = "App Successfully Deployed on: " + new Date().toUTCString();
  _$jscoverage['legacy/plugins/email.js'][62]++;
  sendEmail(title, message, (function (error, success) {
  _$jscoverage['legacy/plugins/email.js'][64]++;
  if (success) {
    _$jscoverage['legacy/plugins/email.js'][65]++;
    logger.info("email sending ok", {title: title});
  }
  else {
    _$jscoverage['legacy/plugins/email.js'][67]++;
    logger.error("email sending failed", {title: title, err: error});
  }
}));
}));
    _$jscoverage['legacy/plugins/email.js'][73]++;
    eventBus.on("notify.error.deployed", (function (err) {
  _$jscoverage['legacy/plugins/email.js'][75]++;
  logger.info("email for failed deployment");
  _$jscoverage['legacy/plugins/email.js'][76]++;
  var title = "Deployment Failed";
  _$jscoverage['legacy/plugins/email.js'][77]++;
  var message = "App Deployment failed on: " + new Date().toUTCString();
  _$jscoverage['legacy/plugins/email.js'][78]++;
  message += "\nMore Info\n\n" + JSON.stringify(err);
  _$jscoverage['legacy/plugins/email.js'][80]++;
  sendEmail(title, message, (function (error, success) {
  _$jscoverage['legacy/plugins/email.js'][82]++;
  if (success) {
    _$jscoverage['legacy/plugins/email.js'][83]++;
    logger.info("email sending ok", {title: title});
  }
  else {
    _$jscoverage['legacy/plugins/email.js'][85]++;
    logger.error("email sending failed", {title: title, err: error});
  }
}));
}));
    _$jscoverage['legacy/plugins/email.js'][91]++;
    eventBus.on("workerRestored", (function (ports) {
  _$jscoverage['legacy/plugins/email.js'][93]++;
  logger.info("email for worker restoration", {ports: ports});
  _$jscoverage['legacy/plugins/email.js'][94]++;
  var title = "Worker(" + ports + ") Crashed and Restored.";
  _$jscoverage['legacy/plugins/email.js'][95]++;
  var message = "Worker: " + ports + " restored on: " + new Date().toUTCString();
  _$jscoverage['legacy/plugins/email.js'][97]++;
  sendEmail(title, message, (function (error, success) {
  _$jscoverage['legacy/plugins/email.js'][99]++;
  if (success) {
    _$jscoverage['legacy/plugins/email.js'][100]++;
    logger.info("email sending ok", {title: title});
  }
  else {
    _$jscoverage['legacy/plugins/email.js'][102]++;
    logger.error("email sending failed", {title: title, err: error});
  }
}));
}));
    _$jscoverage['legacy/plugins/email.js'][108]++;
    function sendEmail() {
      _$jscoverage['legacy/plugins/email.js'][110]++;
      var title = arguments[0];
      _$jscoverage['legacy/plugins/email.js'][111]++;
      var message = arguments[1];
      _$jscoverage['legacy/plugins/email.js'][112]++;
      var callback, reply;
      _$jscoverage['legacy/plugins/email.js'][115]++;
      if (arguments[3]) {
        _$jscoverage['legacy/plugins/email.js'][116]++;
        reply = " Re: ";
        _$jscoverage['legacy/plugins/email.js'][117]++;
        callback = arguments[3];
      }
      else {
        _$jscoverage['legacy/plugins/email.js'][119]++;
        reply = " ";
        _$jscoverage['legacy/plugins/email.js'][120]++;
        callback = arguments[2];
      }
      _$jscoverage['legacy/plugins/email.js'][123]++;
      var htmlMessage = message.replace(/\n/g, "<br>");
      _$jscoverage['legacy/plugins/email.js'][125]++;
      nodemailer.send_mail({sender: config.me.name + "<" + config.me.email + ">", to: config.receivers.join(", "), subject: "[CD: " + packageJs.name + "]" + reply + title, html: "<h3> Continious Deployment Info - " + packageJs.name + " </h3>" + htmlMessage, body: "Continious Deployment Info - " + packageJs.name + "\n\n" + message}, callback);
}
}
});
_$jscoverage['legacy/plugins/email.js'].source = ["/**","\tAvailable Events","\t----------------","","\t* notify.masterDeployed - port","\t* notify.error.materDeploy - port, error","\t* notify.startWorkersDeployment - port","\t* notify.workerDeployed - port","\t* notify.error.workerDeploy - port. error","\t* notify.deployed","\t* notify.error.deployed - error","","\t\t@param ports is the workers ports (one worker can have many ports)","\t* workerKilled ports, appLocation, logFile, errorCode ","","\tEmail Notifier For Nariya","*/","","var jsonReader = require('../jsonReader');","var path = require('path');","var logger = require('winstoon').createLogger('plugins/email');","var nodemailer = require('nodemailer');","","/**","\t@params packageJs - parsed package.json","\t@params eventBus - EventEmiiter instance","*/","exports.load = function(packageJs, eventBus) {","\t\t","\tvar confFilePath = path.resolve(process.cwd(), 'email.json');","\tjsonReader(confFilePath, function(err, config) {","","\t\tif(!err) {","\t\t\t","\t\t\tif(config.smtp &amp;&amp; config.me &amp;&amp; config.receivers) {","\t\t\t\t","\t\t\t\tlogger.info('Email Plugin started');","\t\t\t\tstartWaching(config);\t","\t\t\t} else {","\t\t\t\t","\t\t\t\tlogger.error('Email plugin is not started due to invalid conf');","\t\t\t}","","\t\t} else {","","\t\t\tlogger.error('Email Plugin is not started due to invalid conf file');","\t\t}","\t\t","\t});","","","\tfunction startWaching(config) {","\t\t\t\t","\t\tnodemailer.SMTP = config.smtp;","","\t\t//when app get deployed","\t\teventBus.on('notify.deployed', function() {","","\t\t\tlogger.info(\"email for success deployment\");","\t\t\tvar title = \"Deployment Succeeded\";","\t\t\tvar message = \"App Successfully Deployed on: \" + new Date().toUTCString();","\t\t\tsendEmail(title, message, function(error, success) {","\t\t\t\t","\t\t\t\tif(success) {","\t\t\t\t\tlogger.info('email sending ok', {title: title});","\t\t\t\t} else {","\t\t\t\t\tlogger.error('email sending failed', {title: title, err: error});","\t\t\t\t}","\t\t\t});","\t\t});","","\t\t//when app deployment failed","\t\teventBus.on('notify.error.deployed', function(err) {","","\t\t\tlogger.info(\"email for failed deployment\");","\t\t\tvar title = \"Deployment Failed\";","\t\t\tvar message = \"App Deployment failed on: \" + new Date().toUTCString();","\t\t\tmessage += '\\nMore Info\\n\\n' + JSON.stringify(err);","","\t\t\tsendEmail(title, message, function(error, success) {","\t\t\t\t","\t\t\t\tif(success) {","\t\t\t\t\tlogger.info('email sending ok', {title: title});","\t\t\t\t} else {","\t\t\t\t\tlogger.error('email sending failed', {title: title, err: error});","\t\t\t\t}","\t\t\t});","\t\t});","","\t\t//when a worker got restored","\t\teventBus.on('workerRestored', function(ports) {","","\t\t\tlogger.info(\"email for worker restoration\", {ports: ports});","\t\t\tvar title = \"Worker(\" + ports +\") Crashed and Restored.\";","\t\t\tvar message = \"Worker: \"  + ports + ' restored on: ' + new Date().toUTCString();","","\t\t\tsendEmail(title, message, function(error, success) {","\t\t\t\t","\t\t\t\tif(success) {","\t\t\t\t\tlogger.info('email sending ok', {title: title});","\t\t\t\t} else {","\t\t\t\t\tlogger.error('email sending failed', {title: title, err: error});","\t\t\t\t}","\t\t\t});","\t\t});","","","\t\tfunction sendEmail() {","\t\t\t","\t\t\tvar title = arguments[0];","\t\t\tvar message = arguments[1];","\t\t\tvar callback, reply;","","","\t\t\tif(arguments[3]) {","\t\t\t\treply = \" Re: \";","\t\t\t\tcallback = arguments[3];","\t\t\t} else {","\t\t\t\treply = \" \";","\t\t\t\tcallback = arguments[2];","\t\t\t}","","\t\t\tvar htmlMessage = message.replace(/\\n/g, '&lt;br&gt;');","\t\t\t// send an e-mail","\t\t\tnodemailer.send_mail(","","\t\t\t\t{","\t\t\t\t\tsender: config.me.name + '&lt;' + config.me.email + '&gt;',","\t\t\t\t\tto: config.receivers.join(', '),","\t\t\t\t\tsubject: '[CD: ' + packageJs.name +']' + reply + title ,","\t\t\t\t\thtml: '&lt;h3&gt; Continious Deployment Info - ' + packageJs.name + ' &lt;/h3&gt;' + htmlMessage,","\t\t\t\t\tbody: 'Continious Deployment Info - ' + packageJs.name + '\\n\\n' + message","\t\t\t\t},","","\t\t\t\tcallback","\t\t\t);","\t\t}","\t}","","};","","/**","\t","\t","","*/"];
