/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['legacy/deployer.js']) {
  _$jscoverage['legacy/deployer.js'] = [];
  _$jscoverage['legacy/deployer.js'][1] = 0;
  _$jscoverage['legacy/deployer.js'][2] = 0;
  _$jscoverage['legacy/deployer.js'][3] = 0;
  _$jscoverage['legacy/deployer.js'][4] = 0;
  _$jscoverage['legacy/deployer.js'][18] = 0;
  _$jscoverage['legacy/deployer.js'][19] = 0;
  _$jscoverage['legacy/deployer.js'][22] = 0;
  _$jscoverage['legacy/deployer.js'][24] = 0;
  _$jscoverage['legacy/deployer.js'][25] = 0;
  _$jscoverage['legacy/deployer.js'][26] = 0;
  _$jscoverage['legacy/deployer.js'][39] = 0;
  _$jscoverage['legacy/deployer.js'][41] = 0;
  _$jscoverage['legacy/deployer.js'][42] = 0;
  _$jscoverage['legacy/deployer.js'][45] = 0;
  _$jscoverage['legacy/deployer.js'][47] = 0;
  _$jscoverage['legacy/deployer.js'][48] = 0;
  _$jscoverage['legacy/deployer.js'][50] = 0;
  _$jscoverage['legacy/deployer.js'][52] = 0;
  _$jscoverage['legacy/deployer.js'][53] = 0;
  _$jscoverage['legacy/deployer.js'][58] = 0;
  _$jscoverage['legacy/deployer.js'][60] = 0;
  _$jscoverage['legacy/deployer.js'][61] = 0;
  _$jscoverage['legacy/deployer.js'][64] = 0;
  _$jscoverage['legacy/deployer.js'][66] = 0;
  _$jscoverage['legacy/deployer.js'][67] = 0;
  _$jscoverage['legacy/deployer.js'][68] = 0;
  _$jscoverage['legacy/deployer.js'][70] = 0;
  _$jscoverage['legacy/deployer.js'][71] = 0;
  _$jscoverage['legacy/deployer.js'][76] = 0;
  _$jscoverage['legacy/deployer.js'][78] = 0;
  _$jscoverage['legacy/deployer.js'][79] = 0;
  _$jscoverage['legacy/deployer.js'][80] = 0;
  _$jscoverage['legacy/deployer.js'][82] = 0;
  _$jscoverage['legacy/deployer.js'][83] = 0;
  _$jscoverage['legacy/deployer.js'][88] = 0;
  _$jscoverage['legacy/deployer.js'][90] = 0;
  _$jscoverage['legacy/deployer.js'][91] = 0;
  _$jscoverage['legacy/deployer.js'][94] = 0;
  _$jscoverage['legacy/deployer.js'][95] = 0;
  _$jscoverage['legacy/deployer.js'][96] = 0;
  _$jscoverage['legacy/deployer.js'][98] = 0;
  _$jscoverage['legacy/deployer.js'][100] = 0;
  _$jscoverage['legacy/deployer.js'][103] = 0;
  _$jscoverage['legacy/deployer.js'][104] = 0;
  _$jscoverage['legacy/deployer.js'][105] = 0;
  _$jscoverage['legacy/deployer.js'][109] = 0;
  _$jscoverage['legacy/deployer.js'][110] = 0;
  _$jscoverage['legacy/deployer.js'][112] = 0;
  _$jscoverage['legacy/deployer.js'][113] = 0;
  _$jscoverage['legacy/deployer.js'][115] = 0;
  _$jscoverage['legacy/deployer.js'][118] = 0;
  _$jscoverage['legacy/deployer.js'][119] = 0;
  _$jscoverage['legacy/deployer.js'][136] = 0;
  _$jscoverage['legacy/deployer.js'][138] = 0;
  _$jscoverage['legacy/deployer.js'][141] = 0;
  _$jscoverage['legacy/deployer.js'][142] = 0;
  _$jscoverage['legacy/deployer.js'][143] = 0;
  _$jscoverage['legacy/deployer.js'][146] = 0;
  _$jscoverage['legacy/deployer.js'][147] = 0;
  _$jscoverage['legacy/deployer.js'][148] = 0;
  _$jscoverage['legacy/deployer.js'][150] = 0;
  _$jscoverage['legacy/deployer.js'][151] = 0;
  _$jscoverage['legacy/deployer.js'][154] = 0;
  _$jscoverage['legacy/deployer.js'][155] = 0;
  _$jscoverage['legacy/deployer.js'][163] = 0;
  _$jscoverage['legacy/deployer.js'][165] = 0;
  _$jscoverage['legacy/deployer.js'][167] = 0;
  _$jscoverage['legacy/deployer.js'][168] = 0;
  _$jscoverage['legacy/deployer.js'][169] = 0;
  _$jscoverage['legacy/deployer.js'][172] = 0;
  _$jscoverage['legacy/deployer.js'][174] = 0;
  _$jscoverage['legacy/deployer.js'][175] = 0;
  _$jscoverage['legacy/deployer.js'][178] = 0;
  _$jscoverage['legacy/deployer.js'][179] = 0;
  _$jscoverage['legacy/deployer.js'][182] = 0;
  _$jscoverage['legacy/deployer.js'][183] = 0;
  _$jscoverage['legacy/deployer.js'][185] = 0;
  _$jscoverage['legacy/deployer.js'][186] = 0;
  _$jscoverage['legacy/deployer.js'][187] = 0;
  _$jscoverage['legacy/deployer.js'][189] = 0;
  _$jscoverage['legacy/deployer.js'][190] = 0;
  _$jscoverage['legacy/deployer.js'][194] = 0;
  _$jscoverage['legacy/deployer.js'][201] = 0;
  _$jscoverage['legacy/deployer.js'][203] = 0;
  _$jscoverage['legacy/deployer.js'][204] = 0;
  _$jscoverage['legacy/deployer.js'][205] = 0;
  _$jscoverage['legacy/deployer.js'][206] = 0;
  _$jscoverage['legacy/deployer.js'][209] = 0;
  _$jscoverage['legacy/deployer.js'][210] = 0;
}
_$jscoverage['legacy/deployer.js'][1]++;
var child_process = require("child_process");
_$jscoverage['legacy/deployer.js'][2]++;
var winstoon = require("winstoon");
_$jscoverage['legacy/deployer.js'][3]++;
var logger = winstoon.createLogger("deployer");
_$jscoverage['legacy/deployer.js'][4]++;
var fs = require("fs");
_$jscoverage['legacy/deployer.js'][18]++;
exports.load = (function (gitpath, appspath, eventBus) {
  _$jscoverage['legacy/deployer.js'][19]++;
  return new Deployer(gitpath, appspath, eventBus);
});
_$jscoverage['legacy/deployer.js'][22]++;
function Deployer(gitpath, appspath, eventBus) {
  _$jscoverage['legacy/deployer.js'][24]++;
  var masterApp = null;
  _$jscoverage['legacy/deployer.js'][25]++;
  var workers = {};
  _$jscoverage['legacy/deployer.js'][26]++;
  var killingApp = {};
  _$jscoverage['legacy/deployer.js'][39]++;
  this.deploy = (function deploy(ports, logFile, callback) {
  _$jscoverage['legacy/deployer.js'][41]++;
  var deployName = ports.join("-");
  _$jscoverage['legacy/deployer.js'][42]++;
  var appLocation = appspath + "/" + deployName;
  _$jscoverage['legacy/deployer.js'][45]++;
  logger.info("getting pit pull", {gitpath: gitpath, ports: ports});
  _$jscoverage['legacy/deployer.js'][47]++;
  child_process.exec("git pull origin master", {cwd: gitpath}, (function (err, output) {
  _$jscoverage['legacy/deployer.js'][48]++;
  if (! err) {
    _$jscoverage['legacy/deployer.js'][50]++;
    copyApp();
  }
  else {
    _$jscoverage['legacy/deployer.js'][52]++;
    logger.error("Git pull execution error", {err: err, path: gitpath});
    _$jscoverage['legacy/deployer.js'][53]++;
    callback(err);
  }
}));
  _$jscoverage['legacy/deployer.js'][58]++;
  function copyApp() {
    _$jscoverage['legacy/deployer.js'][60]++;
    logger.info("creating new app directory", {dir: appLocation, ports: ports});
    _$jscoverage['legacy/deployer.js'][61]++;
    child_process.exec("rm -rf " + appLocation + " && mkdir -p " + appLocation, afterDirCreated);
}
  _$jscoverage['legacy/deployer.js'][64]++;
  function afterDirCreated(err, output) {
    _$jscoverage['legacy/deployer.js'][66]++;
    if (! err) {
      _$jscoverage['legacy/deployer.js'][67]++;
      logger.info("copying git dir into the new app Location", {gitpath: gitpath, appspath: appspath});
      _$jscoverage['legacy/deployer.js'][68]++;
      child_process.exec("cp " + gitpath + "/* " + appLocation + " -r", afterCopied);
    }
    else {
      _$jscoverage['legacy/deployer.js'][70]++;
      logger.error("error when creating the new app directory", {dir: appLocation, ports: ports});
      _$jscoverage['legacy/deployer.js'][71]++;
      callback(err);
    }
}
  _$jscoverage['legacy/deployer.js'][76]++;
  function afterCopied(err, output) {
    _$jscoverage['legacy/deployer.js'][78]++;
    if (! err) {
      _$jscoverage['legacy/deployer.js'][79]++;
      logger.info("invoking the init.sh", {appLocation: appLocation});
      _$jscoverage['legacy/deployer.js'][80]++;
      child_process.exec("./init.sh", {cwd: appLocation}, afterExecutedInitSh);
    }
    else {
      _$jscoverage['legacy/deployer.js'][82]++;
      logger.error("copying the app has aborted", {err: err, ports: ports});
      _$jscoverage['legacy/deployer.js'][83]++;
      callback(err);
    }
}
  _$jscoverage['legacy/deployer.js'][88]++;
  function afterExecutedInitSh(err, output) {
    _$jscoverage['legacy/deployer.js'][90]++;
    if (err) {
      _$jscoverage['legacy/deployer.js'][91]++;
      logger.error("failed to execute init.sh", {err: err, ports: ports});
    }
    _$jscoverage['legacy/deployer.js'][94]++;
    logger.info("npm install", {appLocation: appLocation, ports: ports});
    _$jscoverage['legacy/deployer.js'][95]++;
    child_process.exec("npm install", {cwd: appLocation}, afterNpmInstalled);
}
  _$jscoverage['legacy/deployer.js'][96]++;
  ;
  _$jscoverage['legacy/deployer.js'][98]++;
  function afterNpmInstalled(err, output) {
    _$jscoverage['legacy/deployer.js'][100]++;
    if (! err) {
      _$jscoverage['legacy/deployer.js'][103]++;
      if (workers[getDeployName(ports)]) {
        _$jscoverage['legacy/deployer.js'][104]++;
        killingApp[getDeployName(ports)] = true;
        _$jscoverage['legacy/deployer.js'][105]++;
        workers[getDeployName(ports)].kill("SIGQUIT");
      }
      _$jscoverage['legacy/deployer.js'][109]++;
      logger.info("invoking the app", {ports: ports});
      _$jscoverage['legacy/deployer.js'][110]++;
      var app = spawnAnApp(ports, appLocation, logFile);
      _$jscoverage['legacy/deployer.js'][112]++;
      workers[getDeployName(ports)] = app;
      _$jscoverage['legacy/deployer.js'][113]++;
      masterApp = {ports: ports, pid: app.pid, path: appLocation};
      _$jscoverage['legacy/deployer.js'][115]++;
      callback(null, app.pid);
    }
    else {
      _$jscoverage['legacy/deployer.js'][118]++;
      logger.error("failed npm install", {err: err, ports: ports});
      _$jscoverage['legacy/deployer.js'][119]++;
      callback(err);
    }
}
});
  _$jscoverage['legacy/deployer.js'][136]++;
  this.addWorker = (function (ports, logFile, callback) {
  _$jscoverage['legacy/deployer.js'][138]++;
  if (masterApp) {
    _$jscoverage['legacy/deployer.js'][141]++;
    if (workers[getDeployName(ports)]) {
      _$jscoverage['legacy/deployer.js'][142]++;
      killingApp[getDeployName(ports)] = true;
      _$jscoverage['legacy/deployer.js'][143]++;
      workers[getDeployName(ports)].kill("SIGQUIT");
    }
    _$jscoverage['legacy/deployer.js'][146]++;
    var appLocation = masterApp.path;
    _$jscoverage['legacy/deployer.js'][147]++;
    var logFd = fs.openSync(logFile, "a+");
    _$jscoverage['legacy/deployer.js'][148]++;
    var app = spawnAnApp(ports, appLocation, logFile);
    _$jscoverage['legacy/deployer.js'][150]++;
    workers[getDeployName(ports)] = app;
    _$jscoverage['legacy/deployer.js'][151]++;
    callback(null, app.pid);
  }
  else {
    _$jscoverage['legacy/deployer.js'][154]++;
    logger.error("No app deployed yet");
    _$jscoverage['legacy/deployer.js'][155]++;
    callback({message: "No app deployed yet"});
  }
});
  _$jscoverage['legacy/deployer.js'][163]++;
  function spawnAnApp(ports, appLocation, logFile) {
    _$jscoverage['legacy/deployer.js'][165]++;
    var logFd = fs.openSync(logFile, "a+");
    _$jscoverage['legacy/deployer.js'][167]++;
    logger.info("invoking the app for worker", {ports: ports});
    _$jscoverage['legacy/deployer.js'][168]++;
    var params = ["start.js"].concat(ports);
    _$jscoverage['legacy/deployer.js'][169]++;
    var app = child_process.spawn("node", params, {cwd: appLocation});
    _$jscoverage['legacy/deployer.js'][172]++;
    logger.info("worker started", {pid: app.pid});
    _$jscoverage['legacy/deployer.js'][174]++;
    app.stdout.on("data", (function (data) {
  _$jscoverage['legacy/deployer.js'][175]++;
  fs.write(logFd, data.toString("utf8"));
}));
    _$jscoverage['legacy/deployer.js'][178]++;
    app.stderr.on("data", (function (data) {
  _$jscoverage['legacy/deployer.js'][179]++;
  fs.write(logFd, data.toString("utf8"));
}));
    _$jscoverage['legacy/deployer.js'][182]++;
    app.on("exit", (function (code) {
  _$jscoverage['legacy/deployer.js'][183]++;
  fs.close(logFd);
  _$jscoverage['legacy/deployer.js'][185]++;
  if (killingApp[getDeployName(ports)]) {
    _$jscoverage['legacy/deployer.js'][186]++;
    delete killingApp[getDeployName(ports)];
    _$jscoverage['legacy/deployer.js'][187]++;
    logger.error("child process closed (interally) with code " + code, {ports: ports});
  }
  else {
    _$jscoverage['legacy/deployer.js'][189]++;
    logger.error("child process closed (externally) with code " + code, {ports: ports});
    _$jscoverage['legacy/deployer.js'][190]++;
    eventBus.emit("workerKilled", ports, appLocation, logFile, code);
  }
}));
    _$jscoverage['legacy/deployer.js'][194]++;
    return app;
}
  _$jscoverage['legacy/deployer.js'][201]++;
  eventBus.on("workerKilled", (function (ports, appLocation, logFile, code) {
  _$jscoverage['legacy/deployer.js'][203]++;
  logger.info("spawning an app due to kill", {ports: ports, appLocation: appLocation});
  _$jscoverage['legacy/deployer.js'][204]++;
  var app = spawnAnApp(ports, appLocation, logFile);
  _$jscoverage['legacy/deployer.js'][205]++;
  workers[getDeployName(ports)] = app;
  _$jscoverage['legacy/deployer.js'][206]++;
  eventBus.emit("workerRestored", ports);
}));
  _$jscoverage['legacy/deployer.js'][209]++;
  function getDeployName(ports) {
    _$jscoverage['legacy/deployer.js'][210]++;
    return ports.join("-");
}
}
_$jscoverage['legacy/deployer.js'].source = ["var child_process = require('child_process');","var winstoon = require('winstoon');","var logger = winstoon.createLogger('deployer');","var fs = require('fs');","","/**","","\tDeployer - Responsible for deploying the app retreived from the GIT","","\t@param gitpath - Path where GIT based project exists","\t@param appspath - where apps goona deployed","\t@param eventBus - eventEmitter","","\tEvents","\t------","\t* workerKilled ports, appLocation, logFile, errorCode","*/","exports.load = function(gitpath, appspath, eventBus) {","\treturn new Deployer(gitpath, appspath, eventBus);","}","","function Deployer(gitpath, appspath, eventBus) {","","\tvar masterApp = null;","\tvar workers = {}; //set of workers deployed (inlcuding the original deployment)","\tvar killingApp = {} //ports where app is triggered to be killed","\t","\t/**","\t\tDeploy the app into the given port","","\t\t@param ports - array of ports where app need to started","\t\t@param logFile - where the logfile output should send","\t\t@param callback - calls after the complete deployment","\t\t\t","\t\t\t@param err - error object if exists","\t\t\t@param pid - pid of the deployed app","\t\t\tfunction(err, pid) {}","\t*/","\tthis.deploy = function deploy(ports, logFile, callback) {","\t\t","\t\tvar deployName = ports.join('-');","\t\tvar appLocation = appspath + '/' + deployName;","","\t\t//git pull","\t\tlogger.info('getting pit pull', {gitpath: gitpath, ports: ports});","","\t\tchild_process.exec('git pull origin master', {cwd: gitpath}, function(err, output) {","\t\t\tif(!err) {","","\t\t\t\tcopyApp();","\t\t\t} else {","\t\t\t\tlogger.error('Git pull execution error', {err: err, path: gitpath});","\t\t\t\tcallback(err);","\t\t\t}","\t\t});","","\t\t//copy the app","\t\tfunction copyApp() {","\t\t\t","\t\t\tlogger.info('creating new app directory', {dir: appLocation, ports: ports});","\t\t\tchild_process.exec('rm -rf ' + appLocation + ' &amp;&amp; mkdir -p ' + appLocation, afterDirCreated);\t","\t\t}","","\t\tfunction afterDirCreated(err, output) {","\t\t\t","\t\t\tif(!err) {","\t\t\t\tlogger.info('copying git dir into the new app Location', {gitpath: gitpath, appspath: appspath});","\t\t\t\tchild_process.exec('cp ' + gitpath + '/* ' + appLocation + ' -r', afterCopied);","\t\t\t} else {","\t\t\t\tlogger.error('error when creating the new app directory', {dir: appLocation, ports: ports});","\t\t\t\tcallback(err);","\t\t\t}","\t\t}","","\t\t//invoke the init.sh script","\t\tfunction afterCopied(err, output) {","\t\t\t","\t\t\tif(!err) {","\t\t\t\tlogger.info('invoking the init.sh', {appLocation: appLocation});","\t\t\t\tchild_process.exec('./init.sh', {cwd: appLocation}, afterExecutedInitSh);","\t\t\t} else {","\t\t\t\tlogger.error('copying the app has aborted', {err: err, ports: ports});","\t\t\t\tcallback(err);","\t\t\t}","\t\t}","","\t\t//invoke npm install","\t\tfunction afterExecutedInitSh(err, output) {","\t\t","\t\t\tif(err) {","\t\t\t\tlogger.error('failed to execute init.sh', {err: err, ports: ports});","\t\t\t} ","","\t\t\tlogger.info('npm install', {appLocation: appLocation, ports: ports});","\t\t\tchild_process.exec('npm install', {cwd: appLocation}, afterNpmInstalled);","\t\t};","","\t\tfunction afterNpmInstalled(err, output) {","\t\t\t","\t\t\tif(!err) {","","\t\t\t\t//kill the app if already created ","\t\t\t\tif(workers[getDeployName(ports)]) {","\t\t\t\t\tkillingApp[getDeployName(ports)] = true; //mark the app is scheduled to be kill","\t\t\t\t\tworkers[getDeployName(ports)].kill('SIGQUIT');","\t\t\t\t}","","\t\t\t\t//spawn the app","\t\t\t\tlogger.info('invoking the app', {ports: ports});","\t\t\t\tvar app = spawnAnApp(ports, appLocation, logFile);","\t\t","\t\t\t\tworkers[getDeployName(ports)] = app;","\t\t\t\tmasterApp = {ports: ports, pid: app.pid, path: appLocation};","","\t\t\t\tcallback(null, app.pid);","\t\t\t","\t\t\t} else {","\t\t\t\tlogger.error('failed npm install', {err: err, ports: ports});","\t\t\t\tcallback(err);","\t\t\t}","\t\t}","","\t};","","\t/**","\t\tAdd a worker to the currently deployed app","","\t\t@param ports - where app need to started","\t\t@param logFile - where the logfile output should send","\t\t@param callback - calls after the complete deployment","\t\t\t","\t\t\t@param err - error object if exists","\t\t\t@param pid - pid of the deployed app","\t\t\tfunction(err, pid) {}","\t*/","\tthis.addWorker = function(ports, logFile, callback) {","\t\t","\t\tif(masterApp) {","","\t\t\t//kill the app if already created ","\t\t\tif(workers[getDeployName(ports)]) {","\t\t\t\tkillingApp[getDeployName(ports)] = true; //mark the app is scheduled to be kill","\t\t\t\tworkers[getDeployName(ports)].kill('SIGQUIT');","\t\t\t}","\t\t\t","\t\t\tvar appLocation = masterApp.path;","\t\t\tvar logFd = fs.openSync(logFile, 'a+');","\t\t\tvar app = spawnAnApp(ports, appLocation, logFile);","\t","\t\t\tworkers[getDeployName(ports)] = app;","\t\t\tcallback(null, app.pid);","","\t\t} else {","\t\t\tlogger.error('No app deployed yet');","\t\t\tcallback({message: 'No app deployed yet'});","\t\t}","\t};","","","\t/**","\t\tSpawn and app on a new process and return it","\t*/","\tfunction spawnAnApp(ports, appLocation, logFile) {","\t\t","\t\tvar logFd = fs.openSync(logFile, 'a+');","","\t\tlogger.info('invoking the app for worker', {ports: ports});","\t\tvar params = ['start.js'].concat(ports);","\t\tvar app = child_process.spawn('node', params, {cwd: appLocation});","","\t\t//emit about the app","\t\tlogger.info('worker started', {pid: app.pid});","","\t\tapp.stdout.on('data', function (data) {","\t\t\tfs.write(logFd, data.toString('utf8'));","\t\t});","","\t\tapp.stderr.on('data', function (data) {","\t\t\tfs.write(logFd, data.toString('utf8'));","\t\t});","","\t\tapp.on('exit', function (code) {","\t\t\tfs.close(logFd);","\t\t  \t","\t\t  \tif(killingApp[getDeployName(ports)]) { // app is scheduled to kill","\t\t  \t\tdelete killingApp[getDeployName(ports)];","\t\t  \t\tlogger.error('child process closed (interally) with code ' + code, {ports: ports});","\t\t  \t} else {","\t\t  \t\tlogger.error('child process closed (externally) with code ' + code, {ports: ports});","\t\t  \t\teventBus.emit('workerKilled', ports, appLocation, logFile, code);","\t\t  \t}","\t\t});","","\t\treturn app;","\t}","","\t/**","\t\tLook for apps getting killed and restart them","","\t*/","\teventBus.on('workerKilled', function(ports, appLocation, logFile, code) {","\t\t","\t\tlogger.info('spawning an app due to kill', {ports: ports, appLocation: appLocation});","\t\tvar app = spawnAnApp(ports, appLocation, logFile);","\t\tworkers[getDeployName(ports)] = app;","\t\teventBus.emit('workerRestored', ports);","\t});","","\tfunction getDeployName(ports) {","\t\treturn ports.join('-');","\t}","}"];
