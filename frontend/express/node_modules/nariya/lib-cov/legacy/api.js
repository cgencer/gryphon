/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['legacy/api.js']) {
  _$jscoverage['legacy/api.js'] = [];
  _$jscoverage['legacy/api.js'][1] = 0;
  _$jscoverage['legacy/api.js'][2] = 0;
  _$jscoverage['legacy/api.js'][3] = 0;
  _$jscoverage['legacy/api.js'][4] = 0;
  _$jscoverage['legacy/api.js'][5] = 0;
  _$jscoverage['legacy/api.js'][25] = 0;
  _$jscoverage['legacy/api.js'][26] = 0;
  _$jscoverage['legacy/api.js'][29] = 0;
  _$jscoverage['legacy/api.js'][31] = 0;
  _$jscoverage['legacy/api.js'][32] = 0;
  _$jscoverage['legacy/api.js'][34] = 0;
  _$jscoverage['legacy/api.js'][35] = 0;
  _$jscoverage['legacy/api.js'][36] = 0;
  _$jscoverage['legacy/api.js'][38] = 0;
  _$jscoverage['legacy/api.js'][44] = 0;
  _$jscoverage['legacy/api.js'][45] = 0;
  _$jscoverage['legacy/api.js'][46] = 0;
  _$jscoverage['legacy/api.js'][53] = 0;
  _$jscoverage['legacy/api.js'][55] = 0;
  _$jscoverage['legacy/api.js'][57] = 0;
  _$jscoverage['legacy/api.js'][58] = 0;
  _$jscoverage['legacy/api.js'][60] = 0;
  _$jscoverage['legacy/api.js'][62] = 0;
  _$jscoverage['legacy/api.js'][64] = 0;
  _$jscoverage['legacy/api.js'][65] = 0;
  _$jscoverage['legacy/api.js'][67] = 0;
  _$jscoverage['legacy/api.js'][68] = 0;
  _$jscoverage['legacy/api.js'][69] = 0;
  _$jscoverage['legacy/api.js'][73] = 0;
  _$jscoverage['legacy/api.js'][75] = 0;
  _$jscoverage['legacy/api.js'][76] = 0;
  _$jscoverage['legacy/api.js'][77] = 0;
  _$jscoverage['legacy/api.js'][80] = 0;
  _$jscoverage['legacy/api.js'][81] = 0;
  _$jscoverage['legacy/api.js'][83] = 0;
  _$jscoverage['legacy/api.js'][84] = 0;
  _$jscoverage['legacy/api.js'][85] = 0;
  _$jscoverage['legacy/api.js'][87] = 0;
  _$jscoverage['legacy/api.js'][88] = 0;
  _$jscoverage['legacy/api.js'][89] = 0;
  _$jscoverage['legacy/api.js'][90] = 0;
  _$jscoverage['legacy/api.js'][91] = 0;
  _$jscoverage['legacy/api.js'][92] = 0;
  _$jscoverage['legacy/api.js'][93] = 0;
  _$jscoverage['legacy/api.js'][95] = 0;
  _$jscoverage['legacy/api.js'][100] = 0;
  _$jscoverage['legacy/api.js'][102] = 0;
  _$jscoverage['legacy/api.js'][105] = 0;
  _$jscoverage['legacy/api.js'][106] = 0;
  _$jscoverage['legacy/api.js'][108] = 0;
  _$jscoverage['legacy/api.js'][109] = 0;
}
_$jscoverage['legacy/api.js'][1]++;
var path = require("path");
_$jscoverage['legacy/api.js'][2]++;
var dgram = require("dgram");
_$jscoverage['legacy/api.js'][3]++;
var logger = require("winstoon").createLogger("api");
_$jscoverage['legacy/api.js'][4]++;
var qbox = require("qbox");
_$jscoverage['legacy/api.js'][5]++;
var mkdirp = require("mkdirp");
_$jscoverage['legacy/api.js'][25]++;
exports.load = (function (appName, workerPorts, gitpath, eventBus) {
  _$jscoverage['legacy/api.js'][26]++;
  return new Api(appName, workerPorts, gitpath, eventBus);
});
_$jscoverage['legacy/api.js'][29]++;
function Api(appName, workerPorts, gitpath, eventBus) {
  _$jscoverage['legacy/api.js'][31]++;
  var appaspath = path.normalize(process.env.HOME + "/.nariya/" + appName + "/apps");
  _$jscoverage['legacy/api.js'][32]++;
  var logpath = path.normalize(process.env.HOME + "/.nariya/" + appName + "/logs");
  _$jscoverage['legacy/api.js'][34]++;
  var paths = qbox.create(["apps", "logs"]);
  _$jscoverage['legacy/api.js'][35]++;
  mkdirp(appaspath, 493, (function () {
  _$jscoverage['legacy/api.js'][35]++;
  paths.tick("apps");
}));
  _$jscoverage['legacy/api.js'][36]++;
  mkdirp(logpath, 493, (function () {
  _$jscoverage['legacy/api.js'][36]++;
  paths.tick("logs");
}));
  _$jscoverage['legacy/api.js'][38]++;
  var deployer = require("./deployer").load(gitpath, appaspath, eventBus);
  _$jscoverage['legacy/api.js'][44]++;
  this.deploy = (function (callback) {
  _$jscoverage['legacy/api.js'][45]++;
  paths.ready((function () {
  _$jscoverage['legacy/api.js'][46]++;
  deployNow(callback);
}));
});
  _$jscoverage['legacy/api.js'][53]++;
  function deployNow(callback) {
    _$jscoverage['legacy/api.js'][55]++;
    eventBus.emit("notify.startDeploy");
    _$jscoverage['legacy/api.js'][57]++;
    var logfile = path.resolve(logpath, workerPorts[0] + ".log");
    _$jscoverage['legacy/api.js'][58]++;
    deployer.deploy(workerPorts[0], logfile, afterDeployed);
    _$jscoverage['legacy/api.js'][60]++;
    function afterDeployed(err, pid) {
      _$jscoverage['legacy/api.js'][62]++;
      if (! err) {
        _$jscoverage['legacy/api.js'][64]++;
        eventBus.emit("notify.masterDeployed", workerPorts[0]);
        _$jscoverage['legacy/api.js'][65]++;
        startWorkers();
      }
      else {
        _$jscoverage['legacy/api.js'][67]++;
        eventBus.emit("notify.error.materDeploy", workerPorts[0], err);
        _$jscoverage['legacy/api.js'][68]++;
        logger.error("error when deploying the app", {port: workerPorts[0]});
        _$jscoverage['legacy/api.js'][69]++;
        if (callback) {
          _$jscoverage['legacy/api.js'][69]++;
          callback(err);
        }
      }
}
    _$jscoverage['legacy/api.js'][73]++;
    function startWorkers() {
      _$jscoverage['legacy/api.js'][75]++;
      var workersToAdd = [];
      _$jscoverage['legacy/api.js'][76]++;
      for (var lc = 1; lc < workerPorts.length; lc++) {
        _$jscoverage['legacy/api.js'][77]++;
        workersToAdd.push(workerPorts[lc]);
}
      _$jscoverage['legacy/api.js'][80]++;
      eventBus.emit("notify.startWorkersDeployment", workersToAdd);
      _$jscoverage['legacy/api.js'][81]++;
      var workers = qbox.create(workersToAdd);
      _$jscoverage['legacy/api.js'][83]++;
      if (workersToAdd.length == 0) {
        _$jscoverage['legacy/api.js'][83]++;
        workers.start();
      }
      _$jscoverage['legacy/api.js'][84]++;
      var errorStack = [];
      _$jscoverage['legacy/api.js'][85]++;
      workersToAdd.forEach((function (port) {
  _$jscoverage['legacy/api.js'][87]++;
  var logfile = path.resolve(logpath, port + ".log");
  _$jscoverage['legacy/api.js'][88]++;
  deployer.addWorker(port, logfile, (function (err, pid) {
  _$jscoverage['legacy/api.js'][89]++;
  workers.tick(port);
  _$jscoverage['legacy/api.js'][90]++;
  if (err) {
    _$jscoverage['legacy/api.js'][91]++;
    errorStack.push(err);
    _$jscoverage['legacy/api.js'][92]++;
    logger.error("error when starting the worker", {port: port});
    _$jscoverage['legacy/api.js'][93]++;
    eventBus.emit("notify.error.workerDeploy", port, err);
  }
  else {
    _$jscoverage['legacy/api.js'][95]++;
    eventBus.emit("notify.workerDeployed", port);
  }
}));
}));
      _$jscoverage['legacy/api.js'][100]++;
      workers.ready((function () {
  _$jscoverage['legacy/api.js'][102]++;
  if (errorStack.length == 0) {
    _$jscoverage['legacy/api.js'][105]++;
    eventBus.emit("notify.deployed");
    _$jscoverage['legacy/api.js'][106]++;
    if (callback) {
      _$jscoverage['legacy/api.js'][106]++;
      callback();
    }
  }
  else {
    _$jscoverage['legacy/api.js'][108]++;
    eventBus.emit("notify.error.deployed", errorStack);
    _$jscoverage['legacy/api.js'][109]++;
    if (callback) {
      _$jscoverage['legacy/api.js'][109]++;
      callback(errorStack);
    }
  }
}));
}
}
}
_$jscoverage['legacy/api.js'].source = ["var path = require('path');","var dgram = require(\"dgram\");","var logger = require('winstoon').createLogger('api');","var qbox = require('qbox');","var mkdirp = require('mkdirp')","","/**","\tMain API Which controlls main functionalities","","\t@param balancerPort - where the load balancer should starts","\t@param gitpath - where the git repo exists","\t@eventBus - Systemwide EventEmitter","","\tEvents Available","\t----------------","","\t* notify.masterDeployed - port","\t* notify.error.materDeploy - port, error","\t* notify.startWorkersDeployment - port","\t* notify.workerDeployed - port","\t* notify.error.workerDeploy - port. error","\t* notify.deployed","\t* notify.error.deployed - error","*/","exports.load = function(appName, workerPorts, gitpath, eventBus) {","\treturn new Api(appName, workerPorts, gitpath, eventBus);","};","","function Api(appName, workerPorts, gitpath, eventBus) {","","\tvar appaspath = path.normalize(process.env.HOME + '/.nariya/' + appName + '/apps');","\tvar logpath  = path.normalize(process.env.HOME + '/.nariya/' + appName + '/logs');","","\tvar paths = qbox.create(['apps', 'logs']);","\tmkdirp(appaspath, 0755, function() {paths.tick('apps')});","\tmkdirp(logpath, 0755, function() {paths.tick('logs')});","","\tvar deployer = require('./deployer').load(gitpath, appaspath, eventBus);","","\t/**","\t\tDeploy the Current App and Put it to the load balancer","\t\tThis is the Qbox wrapped version for execute after the all the neccesory paths has been created","\t*/","\tthis.deploy = function(callback) {","\t\tpaths.ready(function() {","\t\t\tdeployNow(callback);","\t\t});","\t}","\t","\t/**","\t\tDeploy the Current App and Put it to the load balancer","\t*/","\tfunction deployNow(callback) {","","\t\teventBus.emit('notify.startDeploy');","","\t\tvar logfile = path.resolve(logpath, workerPorts[0] + '.log');","\t\tdeployer.deploy(workerPorts[0], logfile, afterDeployed);","","\t\tfunction afterDeployed(err, pid) {","\t\t\t","\t\t\tif(!err) {","\t\t\t\t//start addtional workers reflecting to the given ports","\t\t\t\teventBus.emit('notify.masterDeployed', workerPorts[0]);","\t\t\t\tstartWorkers();","\t\t\t} else {","\t\t\t\teventBus.emit('notify.error.materDeploy', workerPorts[0], err);","\t\t\t\tlogger.error('error when deploying the app', {port: workerPorts[0]});","\t\t\t\tif(callback) callback(err);","\t\t\t}","\t\t}","","\t\tfunction startWorkers() {","\t\t\t","\t\t\tvar workersToAdd = [];","\t\t\tfor(var lc = 1; lc&lt;workerPorts.length; lc++) {","\t\t\t\tworkersToAdd.push(workerPorts[lc]);","\t\t\t}","","\t\t\teventBus.emit('notify.startWorkersDeployment', workersToAdd);","\t\t\tvar workers = qbox.create(workersToAdd); // flow controll","\t\t\t// start the qbox if there is no worker to add","\t\t\tif(workersToAdd.length == 0) workers.start(); ","\t\t\tvar errorStack = [];","\t\t\tworkersToAdd.forEach(function(port) {","\t\t\t\t","\t\t\t\tvar logfile = path.resolve(logpath, port + '.log');","\t\t\t\tdeployer.addWorker(port, logfile, function(err, pid) {","\t\t\t\t\tworkers.tick(port); //flow control","\t\t\t\t\tif(err) {","\t\t\t\t\t\terrorStack.push(err);","\t\t\t\t\t\tlogger.error('error when starting the worker', {port: port});","\t\t\t\t\t\teventBus.emit('notify.error.workerDeploy', port, err);","\t\t\t\t\t} else {","\t\t\t\t\t\teventBus.emit('notify.workerDeployed', port);","\t\t\t\t\t}\t\t\t\t","\t\t\t\t})","\t\t\t});","","\t\t\tworkers.ready(function() {","\t\t\t\t","\t\t\t\tif(errorStack.length == 0) {","\t\t\t\t\t//no error","\t\t\t\t\t","\t\t\t\t\teventBus.emit('notify.deployed');","\t\t\t\t\tif(callback) callback();","\t\t\t\t} else {","\t\t\t\t\teventBus.emit('notify.error.deployed', errorStack);","\t\t\t\t\tif(callback) callback(errorStack);","\t\t\t\t}","\t\t\t});","\t\t}","\t\t","\t}","","}"];
