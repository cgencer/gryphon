/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['legacy/portParser.js']) {
  _$jscoverage['legacy/portParser.js'] = [];
  _$jscoverage['legacy/portParser.js'][8] = 0;
  _$jscoverage['legacy/portParser.js'][10] = 0;
  _$jscoverage['legacy/portParser.js'][11] = 0;
  _$jscoverage['legacy/portParser.js'][14] = 0;
  _$jscoverage['legacy/portParser.js'][16] = 0;
  _$jscoverage['legacy/portParser.js'][17] = 0;
  _$jscoverage['legacy/portParser.js'][19] = 0;
  _$jscoverage['legacy/portParser.js'][20] = 0;
  _$jscoverage['legacy/portParser.js'][22] = 0;
  _$jscoverage['legacy/portParser.js'][28] = 0;
  _$jscoverage['legacy/portParser.js'][30] = 0;
  _$jscoverage['legacy/portParser.js'][31] = 0;
  _$jscoverage['legacy/portParser.js'][33] = 0;
  _$jscoverage['legacy/portParser.js'][37] = 0;
  _$jscoverage['legacy/portParser.js'][40] = 0;
  _$jscoverage['legacy/portParser.js'][42] = 0;
  _$jscoverage['legacy/portParser.js'][43] = 0;
  _$jscoverage['legacy/portParser.js'][44] = 0;
  _$jscoverage['legacy/portParser.js'][46] = 0;
  _$jscoverage['legacy/portParser.js'][48] = 0;
  _$jscoverage['legacy/portParser.js'][49] = 0;
  _$jscoverage['legacy/portParser.js'][51] = 0;
  _$jscoverage['legacy/portParser.js'][54] = 0;
}
_$jscoverage['legacy/portParser.js'][8]++;
module.exports = (function (portlists) {
  _$jscoverage['legacy/portParser.js'][10]++;
  var workerPorts = [];
  _$jscoverage['legacy/portParser.js'][11]++;
  if (portlists instanceof Array) {
    _$jscoverage['legacy/portParser.js'][14]++;
    for (var index in portlists) {
      _$jscoverage['legacy/portParser.js'][16]++;
      var portlist = portlists[index];
      _$jscoverage['legacy/portParser.js'][17]++;
      var ports = parsePortList(portlist);
      _$jscoverage['legacy/portParser.js'][19]++;
      if (ports == null) {
        _$jscoverage['legacy/portParser.js'][20]++;
        return null;
      }
      else {
        _$jscoverage['legacy/portParser.js'][22]++;
        workerPorts.push(ports);
      }
}
  }
  else {
    _$jscoverage['legacy/portParser.js'][28]++;
    var ports = parsePortList(portlists);
    _$jscoverage['legacy/portParser.js'][30]++;
    if (ports == null) {
      _$jscoverage['legacy/portParser.js'][31]++;
      return null;
    }
    else {
      _$jscoverage['legacy/portParser.js'][33]++;
      workerPorts.push(ports);
    }
  }
  _$jscoverage['legacy/portParser.js'][37]++;
  return workerPorts;
});
_$jscoverage['legacy/portParser.js'][40]++;
function parsePortList(portlist) {
  _$jscoverage['legacy/portParser.js'][42]++;
  portlist = "" + portlist;
  _$jscoverage['legacy/portParser.js'][43]++;
  var ports = portlist.split(",");
  _$jscoverage['legacy/portParser.js'][44]++;
  for (var index in ports) {
    _$jscoverage['legacy/portParser.js'][46]++;
    var port = parseInt(ports[index]);
    _$jscoverage['legacy/portParser.js'][48]++;
    if (isNaN(port)) {
      _$jscoverage['legacy/portParser.js'][49]++;
      return null;
    }
    else {
      _$jscoverage['legacy/portParser.js'][51]++;
      ports[index] = port;
    }
}
  _$jscoverage['legacy/portParser.js'][54]++;
  return ports;
}
_$jscoverage['legacy/portParser.js'].source = ["/**","","\tParse ports given as the parameter","","\t@param portlists - list of portlists (Array or single entry)","\t@returns - lists of arrays(ports) or null in the error","*/","module.exports = function(portlists) {","\t","\tvar workerPorts = [];","\tif(portlists instanceof Array) {","\t\t//if there are more than one portlists (more than one worker)","","\t\tfor(var index in portlists) {","\t\t\t","\t\t\tvar portlist = portlists[index];","\t\t\tvar ports = parsePortList(portlist);","","\t\t\tif(ports == null) { //if there is an error the parsing","\t\t\t\treturn null; //return null for indicating error","\t\t\t} else {","\t\t\t\tworkerPorts.push(ports);","\t\t\t}","\t\t}","","\t} else {","\t\t//portlist is an single string\t\t","\t\tvar ports = parsePortList(portlists);","","\t\tif(ports == null) { //if there is an error the parsing","\t\t\treturn null; //return null for indicating error","\t\t} else {","\t\t\tworkerPorts.push(ports);","\t\t}","\t}","","\treturn workerPorts;","};","","function parsePortList(portlist) {","\t","\tportlist = '' + portlist;","\tvar ports = portlist.split(',');","\tfor(var index in ports) {","","\t\tvar port = parseInt(ports[index]);","\t\t","\t\tif(isNaN(port)) { //if there is an error the parsing","\t\t\treturn null; //return null for indicating error","\t\t} else {","\t\t\tports[index] = port;","\t\t}","\t}","\treturn ports;","}"];
