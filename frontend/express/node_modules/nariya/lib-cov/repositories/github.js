/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['repositories/github.js']) {
  _$jscoverage['repositories/github.js'] = [];
  _$jscoverage['repositories/github.js'][6] = 0;
  _$jscoverage['repositories/github.js'][7] = 0;
  _$jscoverage['repositories/github.js'][9] = 0;
  _$jscoverage['repositories/github.js'][11] = 0;
  _$jscoverage['repositories/github.js'][19] = 0;
  _$jscoverage['repositories/github.js'][21] = 0;
  _$jscoverage['repositories/github.js'][22] = 0;
  _$jscoverage['repositories/github.js'][23] = 0;
  _$jscoverage['repositories/github.js'][24] = 0;
  _$jscoverage['repositories/github.js'][26] = 0;
  _$jscoverage['repositories/github.js'][28] = 0;
  _$jscoverage['repositories/github.js'][35] = 0;
  _$jscoverage['repositories/github.js'][37] = 0;
  _$jscoverage['repositories/github.js'][38] = 0;
  _$jscoverage['repositories/github.js'][39] = 0;
  _$jscoverage['repositories/github.js'][41] = 0;
  _$jscoverage['repositories/github.js'][44] = 0;
  _$jscoverage['repositories/github.js'][48] = 0;
}
_$jscoverage['repositories/github.js'][6]++;
var logger = require("winstoon").createLogger("repositories/github");
_$jscoverage['repositories/github.js'][7]++;
var exec = require("child_process").exec;
_$jscoverage['repositories/github.js'][9]++;
module.exports = GithubRepository;
_$jscoverage['repositories/github.js'][11]++;
function GithubRepository() {
  _$jscoverage['repositories/github.js'][19]++;
  this.checkForDeploy = (function (repositoryInfo, httpPayload) {
  _$jscoverage['repositories/github.js'][21]++;
  var payloadText = httpPayload.substr(8);
  _$jscoverage['repositories/github.js'][22]++;
  var payload = JSON.parse(unescape(payloadText));
  _$jscoverage['repositories/github.js'][23]++;
  var ref = payload.ref;
  _$jscoverage['repositories/github.js'][24]++;
  var branch = ref.split("/")[2];
  _$jscoverage['repositories/github.js'][26]++;
  logger.info("branch checking", {needed: repositoryInfo.branch, received: branch});
  _$jscoverage['repositories/github.js'][28]++;
  return repositoryInfo.branch == branch;
});
  _$jscoverage['repositories/github.js'][35]++;
  this.getUpdates = (function (repositoryInfo, callback) {
  _$jscoverage['repositories/github.js'][37]++;
  logger.info("getting repo updates", {type: "github", appname: repositoryInfo.name});
  _$jscoverage['repositories/github.js'][38]++;
  var branch = repositoryInfo.branch || "master";
  _$jscoverage['repositories/github.js'][39]++;
  exec("git pull origin " + branch, {cwd: repositoryInfo.location}, (function (err, stdout, stderr) {
  _$jscoverage['repositories/github.js'][41]++;
  if (err) {
    _$jscoverage['repositories/github.js'][44]++;
    callback(err);
  }
  else {
    _$jscoverage['repositories/github.js'][48]++;
    callback(null, stdout);
  }
}));
});
}
_$jscoverage['repositories/github.js'].source = ["/**","","\tGithub repository for allowing to get the updates","*/","","var logger = require('winstoon').createLogger('repositories/github');","var exec = require('child_process').exec;","","module.exports = GithubRepository;","","function GithubRepository() {","\t","\t/**","\t\tWhether to deploy or not? this decision is taken here by analyzing http request data send by the webhook and","\t\tthe configuration provided","","\t\t@returns true or false","\t*/","\tthis.checkForDeploy = function(repositoryInfo, httpPayload) {","\t","\t\tvar payloadText = httpPayload.substr(8);","\t\tvar payload = JSON.parse(unescape(payloadText));","\t\tvar ref = payload.ref;","\t\tvar branch = ref.split('/')[2];","","\t\tlogger.info('branch checking', {needed: repositoryInfo.branch, received: branch});","\t\t","\t\treturn repositoryInfo.branch == branch;","\t};","","","\t/**","\t\tGoto the @location and give an git pull origin master","\t*/","\tthis.getUpdates = function(repositoryInfo, callback) {","\t\t","\t\tlogger.info('getting repo updates', {type: 'github', appname: repositoryInfo.name});","\t\tvar branch = repositoryInfo.branch || 'master';","\t\texec('git pull origin ' + branch, {cwd: repositoryInfo.location}, function(err, stdout, stderr) {","\t\t\t","\t\t\tif(err) {","","\t\t\t\t//some error with the exec","\t\t\t\tcallback(err);","\t\t\t} else {","\t\t\t\t","\t\t\t\t//success","\t\t\t\tcallback(null, stdout);","\t\t\t}","","\t\t});","\t};","","}"];
