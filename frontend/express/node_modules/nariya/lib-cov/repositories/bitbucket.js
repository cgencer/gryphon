/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['repositories/bitbucket.js']) {
  _$jscoverage['repositories/bitbucket.js'] = [];
  _$jscoverage['repositories/bitbucket.js'][6] = 0;
  _$jscoverage['repositories/bitbucket.js'][7] = 0;
  _$jscoverage['repositories/bitbucket.js'][9] = 0;
  _$jscoverage['repositories/bitbucket.js'][11] = 0;
  _$jscoverage['repositories/bitbucket.js'][19] = 0;
  _$jscoverage['repositories/bitbucket.js'][21] = 0;
  _$jscoverage['repositories/bitbucket.js'][22] = 0;
  _$jscoverage['repositories/bitbucket.js'][24] = 0;
  _$jscoverage['repositories/bitbucket.js'][25] = 0;
  _$jscoverage['repositories/bitbucket.js'][26] = 0;
  _$jscoverage['repositories/bitbucket.js'][27] = 0;
  _$jscoverage['repositories/bitbucket.js'][28] = 0;
  _$jscoverage['repositories/bitbucket.js'][29] = 0;
  _$jscoverage['repositories/bitbucket.js'][33] = 0;
  _$jscoverage['repositories/bitbucket.js'][35] = 0;
  _$jscoverage['repositories/bitbucket.js'][42] = 0;
  _$jscoverage['repositories/bitbucket.js'][44] = 0;
  _$jscoverage['repositories/bitbucket.js'][45] = 0;
  _$jscoverage['repositories/bitbucket.js'][46] = 0;
  _$jscoverage['repositories/bitbucket.js'][48] = 0;
  _$jscoverage['repositories/bitbucket.js'][51] = 0;
  _$jscoverage['repositories/bitbucket.js'][55] = 0;
}
_$jscoverage['repositories/bitbucket.js'][6]++;
var logger = require("winstoon").createLogger("repositories/bitbucket");
_$jscoverage['repositories/bitbucket.js'][7]++;
var exec = require("child_process").exec;
_$jscoverage['repositories/bitbucket.js'][9]++;
module.exports = Repository;
_$jscoverage['repositories/bitbucket.js'][11]++;
function Repository() {
  _$jscoverage['repositories/bitbucket.js'][19]++;
  this.checkForDeploy = (function (repositoryInfo, httpPayload) {
  _$jscoverage['repositories/bitbucket.js'][21]++;
  var payloadText = httpPayload.substr(8).replace(/\+/g, "%20");
  _$jscoverage['repositories/bitbucket.js'][22]++;
  var payload = JSON.parse(unescape(payloadText));
  _$jscoverage['repositories/bitbucket.js'][24]++;
  var allowed = false;
  _$jscoverage['repositories/bitbucket.js'][25]++;
  for (var index in payload.commits) {
    _$jscoverage['repositories/bitbucket.js'][26]++;
    var commit = payload.commits[index];
    _$jscoverage['repositories/bitbucket.js'][27]++;
    if (commit.branch == repositoryInfo.branch) {
      _$jscoverage['repositories/bitbucket.js'][28]++;
      allowed = true;
      _$jscoverage['repositories/bitbucket.js'][29]++;
      break;
    }
}
  _$jscoverage['repositories/bitbucket.js'][33]++;
  logger.info("branch checking", {needed: repositoryInfo.branch});
  _$jscoverage['repositories/bitbucket.js'][35]++;
  return allowed;
});
  _$jscoverage['repositories/bitbucket.js'][42]++;
  this.getUpdates = (function (repositoryInfo, callback) {
  _$jscoverage['repositories/bitbucket.js'][44]++;
  logger.info("getting repo updates", {type: "bitbucket", appname: repositoryInfo.name});
  _$jscoverage['repositories/bitbucket.js'][45]++;
  var branch = repositoryInfo.branch || "master";
  _$jscoverage['repositories/bitbucket.js'][46]++;
  exec("git pull origin " + branch, {cwd: repositoryInfo.location}, (function (err, stdout, stderr) {
  _$jscoverage['repositories/bitbucket.js'][48]++;
  if (err) {
    _$jscoverage['repositories/bitbucket.js'][51]++;
    callback(err);
  }
  else {
    _$jscoverage['repositories/bitbucket.js'][55]++;
    callback(null, stdout);
  }
}));
});
}
_$jscoverage['repositories/bitbucket.js'].source = ["/**","","\tBitBucker get repository for allowing to get the updates","*/","","var logger = require('winstoon').createLogger('repositories/bitbucket');","var exec = require('child_process').exec;","","module.exports = Repository;","","function Repository() {","\t","\t/**","\t\tWhether to deploy or not? this decision is taken here by analyzing http request data send by the webhook and","\t\tthe configuration provided","","\t\t@returns true or false","\t*/","\tthis.checkForDeploy = function(repositoryInfo, httpPayload) {","\t","\t\tvar payloadText = httpPayload.substr(8).replace(/\\+/g, '%20');","\t\tvar payload = JSON.parse(unescape(payloadText));","","\t\tvar allowed = false;","\t\tfor(var index in payload.commits) {","\t\t\tvar commit = payload.commits[index];","\t\t\tif(commit.branch == repositoryInfo.branch) {","\t\t\t\tallowed = true;","\t\t\t\tbreak;","\t\t\t}\t","\t\t}","","\t\tlogger.info('branch checking', {needed: repositoryInfo.branch});","","\t\treturn allowed;","\t};","","","\t/**","\t\tGoto the @location and give an git pull origin master","\t*/","\tthis.getUpdates = function(repositoryInfo, callback) {","\t\t","\t\tlogger.info('getting repo updates', {type: 'bitbucket', appname: repositoryInfo.name});","\t\tvar branch = repositoryInfo.branch || 'master';","\t\texec('git pull origin ' + branch, {cwd: repositoryInfo.location}, function(err, stdout, stderr) {","\t\t\t","\t\t\tif(err) {","","\t\t\t\t//some error with the exec","\t\t\t\tcallback(err);","\t\t\t} else {","\t\t\t\t","\t\t\t\t//success","\t\t\t\tcallback(null, stdout);","\t\t\t}","","\t\t});","\t};","","}"];
