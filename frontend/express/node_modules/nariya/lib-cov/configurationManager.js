/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['configurationManager.js']) {
  _$jscoverage['configurationManager.js'] = [];
  _$jscoverage['configurationManager.js'][1] = 0;
  _$jscoverage['configurationManager.js'][2] = 0;
  _$jscoverage['configurationManager.js'][3] = 0;
  _$jscoverage['configurationManager.js'][5] = 0;
  _$jscoverage['configurationManager.js'][10] = 0;
  _$jscoverage['configurationManager.js'][13] = 0;
  _$jscoverage['configurationManager.js'][14] = 0;
  _$jscoverage['configurationManager.js'][15] = 0;
  _$jscoverage['configurationManager.js'][17] = 0;
  _$jscoverage['configurationManager.js'][23] = 0;
  _$jscoverage['configurationManager.js'][24] = 0;
  _$jscoverage['configurationManager.js'][27] = 0;
  _$jscoverage['configurationManager.js'][28] = 0;
  _$jscoverage['configurationManager.js'][31] = 0;
  _$jscoverage['configurationManager.js'][32] = 0;
  _$jscoverage['configurationManager.js'][35] = 0;
  _$jscoverage['configurationManager.js'][37] = 0;
  _$jscoverage['configurationManager.js'][39] = 0;
  _$jscoverage['configurationManager.js'][40] = 0;
  _$jscoverage['configurationManager.js'][41] = 0;
  _$jscoverage['configurationManager.js'][42] = 0;
  _$jscoverage['configurationManager.js'][45] = 0;
  _$jscoverage['configurationManager.js'][47] = 0;
  _$jscoverage['configurationManager.js'][49] = 0;
  _$jscoverage['configurationManager.js'][50] = 0;
  _$jscoverage['configurationManager.js'][51] = 0;
  _$jscoverage['configurationManager.js'][52] = 0;
  _$jscoverage['configurationManager.js'][55] = 0;
  _$jscoverage['configurationManager.js'][56] = 0;
  _$jscoverage['configurationManager.js'][59] = 0;
  _$jscoverage['configurationManager.js'][60] = 0;
  _$jscoverage['configurationManager.js'][65] = 0;
  _$jscoverage['configurationManager.js'][67] = 0;
  _$jscoverage['configurationManager.js'][68] = 0;
  _$jscoverage['configurationManager.js'][71] = 0;
  _$jscoverage['configurationManager.js'][72] = 0;
  _$jscoverage['configurationManager.js'][73] = 0;
  _$jscoverage['configurationManager.js'][76] = 0;
  _$jscoverage['configurationManager.js'][78] = 0;
  _$jscoverage['configurationManager.js'][80] = 0;
  _$jscoverage['configurationManager.js'][81] = 0;
  _$jscoverage['configurationManager.js'][82] = 0;
  _$jscoverage['configurationManager.js'][83] = 0;
}
_$jscoverage['configurationManager.js'][1]++;
var cjson = require("cjson");
_$jscoverage['configurationManager.js'][2]++;
var fs = require("fs");
_$jscoverage['configurationManager.js'][3]++;
var logger = require("winstoon").createLogger("configurationManager");
_$jscoverage['configurationManager.js'][5]++;
module.exports = ConfigurationManager;
_$jscoverage['configurationManager.js'][10]++;
function ConfigurationManager(configFile) {
  _$jscoverage['configurationManager.js'][13]++;
  var self = this;
  _$jscoverage['configurationManager.js'][14]++;
  var repositories = {};
  _$jscoverage['configurationManager.js'][15]++;
  var emailInfo;
  _$jscoverage['configurationManager.js'][17]++;
  this.rawData;
  _$jscoverage['configurationManager.js'][23]++;
  this.getRepositoryInfo = (function (secretKey) {
  _$jscoverage['configurationManager.js'][24]++;
  return repositories[secretKey];
});
  _$jscoverage['configurationManager.js'][27]++;
  this.getEmailInfo = (function () {
  _$jscoverage['configurationManager.js'][28]++;
  return this.rawData.emailInfo;
});
  _$jscoverage['configurationManager.js'][31]++;
  this.getServerInfo = (function () {
  _$jscoverage['configurationManager.js'][32]++;
  return this.rawData.server;
});
  _$jscoverage['configurationManager.js'][35]++;
  this.update = (function (callback) {
  _$jscoverage['configurationManager.js'][37]++;
  fs.readFile(configFile, "utf-8", (function (err, data) {
  _$jscoverage['configurationManager.js'][39]++;
  if (! err) {
    _$jscoverage['configurationManager.js'][40]++;
    var data = cjson.parse(data);
    _$jscoverage['configurationManager.js'][41]++;
    self.rawData = data;
    _$jscoverage['configurationManager.js'][42]++;
    logger.info("loading config loaded", {file: configFile});
    _$jscoverage['configurationManager.js'][45]++;
    repositories = {};
    _$jscoverage['configurationManager.js'][47]++;
    for (var repoName in data.repositories) {
      _$jscoverage['configurationManager.js'][49]++;
      logger.debug("adding repo", {name: repoName});
      _$jscoverage['configurationManager.js'][50]++;
      var entry = data.repositories[repoName];
      _$jscoverage['configurationManager.js'][51]++;
      entry.name = repoName;
      _$jscoverage['configurationManager.js'][52]++;
      repositories[entry.secret] = entry;
}
    _$jscoverage['configurationManager.js'][55]++;
    emailInfo = data.emailInfo;
    _$jscoverage['configurationManager.js'][56]++;
    callback();
  }
  else {
    _$jscoverage['configurationManager.js'][59]++;
    logger.error("error reading config file", {file: configFile, err: err});
    _$jscoverage['configurationManager.js'][60]++;
    callback(err);
  }
}));
});
  _$jscoverage['configurationManager.js'][65]++;
  this.updateSync = (function () {
  _$jscoverage['configurationManager.js'][67]++;
  var data = fs.readFileSync(configFile, "utf-8");
  _$jscoverage['configurationManager.js'][68]++;
  logger.info("loading config loaded", {file: configFile});
  _$jscoverage['configurationManager.js'][71]++;
  var data = cjson.parse(data);
  _$jscoverage['configurationManager.js'][72]++;
  self.rawData = data;
  _$jscoverage['configurationManager.js'][73]++;
  logger.info("loading config loaded", {file: configFile});
  _$jscoverage['configurationManager.js'][76]++;
  repositories = {};
  _$jscoverage['configurationManager.js'][78]++;
  for (var repoName in data.repositories) {
    _$jscoverage['configurationManager.js'][80]++;
    logger.debug("adding repo", {name: repoName});
    _$jscoverage['configurationManager.js'][81]++;
    var entry = data.repositories[repoName];
    _$jscoverage['configurationManager.js'][82]++;
    entry.name = repoName;
    _$jscoverage['configurationManager.js'][83]++;
    repositories[entry.secret] = entry;
}
});
}
_$jscoverage['configurationManager.js'].source = ["var cjson = require('cjson');","var fs = require('fs');","var logger = require('winstoon').createLogger('configurationManager');","","module.exports = ConfigurationManager;","","/**","\tWatch for a the @configFile config file and gives the config info as asked","*/","function ConfigurationManager(configFile) {","\t","","\tvar self = this;","\tvar repositories = {};","\tvar emailInfo;","","\tthis.rawData;","","\t/**","\t\tGet the repository info index by the @secretKey","\t\tin the config file","\t*/","\tthis.getRepositoryInfo = function(secretKey) {","\t\treturn repositories[secretKey];","\t};","","\tthis.getEmailInfo = function() {","\t\treturn this.rawData.emailInfo;","\t};","","\tthis.getServerInfo = function() {","\t\treturn this.rawData.server;\t","\t};","","\tthis.update = function (callback) {","","\t\tfs.readFile(configFile, 'utf-8', function (err, data) {","\t\t\t","\t\t\tif(!err) {","\t\t\t\tvar data = cjson.parse(data);\t","\t\t\t\tself.rawData = data;","\t\t\t\tlogger.info('loading config loaded', {file: configFile});","","\t\t\t\t//reset the repositories","\t\t\t\trepositories = {};","","\t\t\t\tfor(var repoName in data.repositories) {","","\t\t\t\t\tlogger.debug('adding repo', {name: repoName});","\t\t\t\t\tvar entry = data.repositories[repoName];","\t\t\t\t\tentry.name = repoName;","\t\t\t\t\trepositories[entry.secret] = entry;","\t\t\t\t}","","\t\t\t\temailInfo = data.emailInfo;","\t\t\t\tcallback();","","\t\t\t} else {","\t\t\t\tlogger.error('error reading config file', {file: configFile, err: err});","\t\t\t\tcallback(err);\t\t","\t\t\t}","\t\t});","\t}","","\tthis.updateSync = function() {","\t","\t\tvar data = fs.readFileSync(configFile, 'utf-8');","\t\tlogger.info('loading config loaded', {file: configFile});","\t\t\t","\t\t\t\t","\t\tvar data = cjson.parse(data);\t","\t\tself.rawData = data;","\t\tlogger.info('loading config loaded', {file: configFile});","","\t\t//reset the repositories","\t\trepositories = {};","","\t\tfor(var repoName in data.repositories) {","","\t\t\tlogger.debug('adding repo', {name: repoName});","\t\t\tvar entry = data.repositories[repoName];","\t\t\tentry.name = repoName;","\t\t\trepositories[entry.secret] = entry;","\t\t}","","\t}","}",""];
