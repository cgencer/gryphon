/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['webhookListener.js']) {
  _$jscoverage['webhookListener.js'] = [];
  _$jscoverage['webhookListener.js'][1] = 0;
  _$jscoverage['webhookListener.js'][2] = 0;
  _$jscoverage['webhookListener.js'][3] = 0;
  _$jscoverage['webhookListener.js'][5] = 0;
  _$jscoverage['webhookListener.js'][7] = 0;
  _$jscoverage['webhookListener.js'][9] = 0;
  _$jscoverage['webhookListener.js'][10] = 0;
  _$jscoverage['webhookListener.js'][12] = 0;
  _$jscoverage['webhookListener.js'][14] = 0;
  _$jscoverage['webhookListener.js'][15] = 0;
  _$jscoverage['webhookListener.js'][16] = 0;
  _$jscoverage['webhookListener.js'][18] = 0;
  _$jscoverage['webhookListener.js'][20] = 0;
  _$jscoverage['webhookListener.js'][21] = 0;
  _$jscoverage['webhookListener.js'][24] = 0;
  _$jscoverage['webhookListener.js'][25] = 0;
  _$jscoverage['webhookListener.js'][26] = 0;
  _$jscoverage['webhookListener.js'][28] = 0;
  _$jscoverage['webhookListener.js'][32] = 0;
  _$jscoverage['webhookListener.js'][37] = 0;
  _$jscoverage['webhookListener.js'][40] = 0;
  _$jscoverage['webhookListener.js'][42] = 0;
  _$jscoverage['webhookListener.js'][44] = 0;
  _$jscoverage['webhookListener.js'][46] = 0;
  _$jscoverage['webhookListener.js'][47] = 0;
  _$jscoverage['webhookListener.js'][51] = 0;
  _$jscoverage['webhookListener.js'][53] = 0;
  _$jscoverage['webhookListener.js'][54] = 0;
  _$jscoverage['webhookListener.js'][55] = 0;
  _$jscoverage['webhookListener.js'][57] = 0;
  _$jscoverage['webhookListener.js'][58] = 0;
  _$jscoverage['webhookListener.js'][63] = 0;
  _$jscoverage['webhookListener.js'][65] = 0;
  _$jscoverage['webhookListener.js'][66] = 0;
  _$jscoverage['webhookListener.js'][69] = 0;
  _$jscoverage['webhookListener.js'][70] = 0;
  _$jscoverage['webhookListener.js'][73] = 0;
  _$jscoverage['webhookListener.js'][75] = 0;
  _$jscoverage['webhookListener.js'][77] = 0;
  _$jscoverage['webhookListener.js'][79] = 0;
  _$jscoverage['webhookListener.js'][80] = 0;
  _$jscoverage['webhookListener.js'][81] = 0;
  _$jscoverage['webhookListener.js'][82] = 0;
  _$jscoverage['webhookListener.js'][83] = 0;
  _$jscoverage['webhookListener.js'][84] = 0;
}
_$jscoverage['webhookListener.js'][1]++;
var logger = require("winstoon").createLogger("webhookListener");
_$jscoverage['webhookListener.js'][2]++;
var express = require("express");
_$jscoverage['webhookListener.js'][3]++;
var Deployer = require("./deployer");
_$jscoverage['webhookListener.js'][5]++;
module.exports = WebhookListener;
_$jscoverage['webhookListener.js'][7]++;
function WebhookListener(configurationManager, repositories, deployer, notifiers) {
  _$jscoverage['webhookListener.js'][9]++;
  var app = express.createServer();
  _$jscoverage['webhookListener.js'][10]++;
  app.use(rawBodyMiddleware());
  _$jscoverage['webhookListener.js'][12]++;
  app.post("/deploy/:secret", (function (req, res) {
  _$jscoverage['webhookListener.js'][14]++;
  res.send(" ");
  _$jscoverage['webhookListener.js'][15]++;
  var repoInfo = configurationManager.getRepositoryInfo(req.params.secret);
  _$jscoverage['webhookListener.js'][16]++;
  if (repoInfo) {
    _$jscoverage['webhookListener.js'][18]++;
    logger.info("receiving valid deployment request", {appname: repoInfo.name, secret: req.params.secret});
    _$jscoverage['webhookListener.js'][20]++;
    var repository = repositories[repoInfo.type];
    _$jscoverage['webhookListener.js'][21]++;
    if (repository) {
      _$jscoverage['webhookListener.js'][24]++;
      var allowToDeploy = repository.checkForDeploy(repoInfo, req.rawBody);
      _$jscoverage['webhookListener.js'][25]++;
      if (allowToDeploy) {
        _$jscoverage['webhookListener.js'][26]++;
        repository.getUpdates(repoInfo, afterRepoUpdated);
      }
      else {
        _$jscoverage['webhookListener.js'][28]++;
        logger.info("not allowed to deploy", {appname: repoInfo.name});
      }
    }
    else {
      _$jscoverage['webhookListener.js'][32]++;
      logger.warn("repository type not exists", {appname: repoInfo.name, type: repoInfo.type});
    }
  }
  else {
    _$jscoverage['webhookListener.js'][37]++;
    logger.warn("invalid deploy request", {secret: req.params.secret});
  }
  _$jscoverage['webhookListener.js'][40]++;
  function afterRepoUpdated(err) {
    _$jscoverage['webhookListener.js'][42]++;
    if (! err) {
      _$jscoverage['webhookListener.js'][44]++;
      deployer.deploy(repoInfo, afterDeployed);
    }
    else {
      _$jscoverage['webhookListener.js'][46]++;
      logger.error("repository update failed", {err: err, appname: repoInfo.name});
      _$jscoverage['webhookListener.js'][47]++;
      notifiers.emit("deploy.failed", repoInfo.name, err);
    }
}
  _$jscoverage['webhookListener.js'][51]++;
  function afterDeployed(err, deployed) {
    _$jscoverage['webhookListener.js'][53]++;
    if (! err) {
      _$jscoverage['webhookListener.js'][54]++;
      logger.info("deployment succeded", {appname: repoInfo.name});
      _$jscoverage['webhookListener.js'][55]++;
      notifiers.emit("deploy.success", repoInfo.name);
    }
    else {
      _$jscoverage['webhookListener.js'][57]++;
      logger.error("deployment failed", {appname: repoInfo.name, err: err});
      _$jscoverage['webhookListener.js'][58]++;
      notifiers.emit("deploy.failed", repoInfo.name, err);
    }
}
}));
  _$jscoverage['webhookListener.js'][63]++;
  this.listen = (function (port, callback) {
  _$jscoverage['webhookListener.js'][65]++;
  logger.info("WebhookListner started", {port: port});
  _$jscoverage['webhookListener.js'][66]++;
  app.listen(port, callback);
});
  _$jscoverage['webhookListener.js'][69]++;
  this.close = (function () {
  _$jscoverage['webhookListener.js'][70]++;
  app.close();
});
  _$jscoverage['webhookListener.js'][73]++;
  function rawBodyMiddleware() {
    _$jscoverage['webhookListener.js'][75]++;
    return (function rawBodyMiddleware(req, res, next) {
  _$jscoverage['webhookListener.js'][77]++;
  if ("GET" == req.method || "HEAD" == req.method) {
    _$jscoverage['webhookListener.js'][77]++;
    return next();
  }
  _$jscoverage['webhookListener.js'][79]++;
  var data = "";
  _$jscoverage['webhookListener.js'][80]++;
  req.setEncoding("utf8");
  _$jscoverage['webhookListener.js'][81]++;
  req.on("data", (function (chunk) {
  _$jscoverage['webhookListener.js'][81]++;
  data += chunk;
}));
  _$jscoverage['webhookListener.js'][82]++;
  req.on("end", (function () {
  _$jscoverage['webhookListener.js'][83]++;
  req.rawBody = data;
  _$jscoverage['webhookListener.js'][84]++;
  next();
}));
});
}
}
_$jscoverage['webhookListener.js'].source = ["var logger = require('winstoon').createLogger('webhookListener');","var express = require('express');","var Deployer = require('./deployer');","","module.exports = WebhookListener;","","function WebhookListener(configurationManager, repositories, deployer, notifiers) {","\t\t","\tvar app = express.createServer();","\tapp.use(rawBodyMiddleware());","","\tapp.post('/deploy/:secret', function(req, res) {","\t\t","\t\tres.send(' ');","\t\tvar repoInfo = configurationManager.getRepositoryInfo(req.params.secret);","\t\tif(repoInfo) {","\t\t\t","\t\t\tlogger.info('receiving valid deployment request', {appname: repoInfo.name, secret: req.params.secret});","\t\t\t//check for the repository type","\t\t\tvar repository = repositories[repoInfo.type];","\t\t\tif(repository) {","\t\t\t\t","\t\t\t\t//check for deployment","\t\t\t\tvar allowToDeploy = repository.checkForDeploy(repoInfo, req.rawBody);","\t\t\t\tif(allowToDeploy) {","\t\t\t\t\trepository.getUpdates(repoInfo, afterRepoUpdated);","\t\t\t\t} else {","\t\t\t\t\tlogger.info('not allowed to deploy', {appname: repoInfo.name});","\t\t\t\t}","\t\t\t} else {","","\t\t\t\tlogger.warn('repository type not exists', {appname: repoInfo.name, type: repoInfo.type});","\t\t\t}","","\t\t} else {","","\t\t\tlogger.warn('invalid deploy request', {secret: req.params.secret});","\t\t}","","\t\tfunction afterRepoUpdated(err) {","\t\t\t","\t\t\tif(!err) {","\t\t\t\t","\t\t\t\tdeployer.deploy(repoInfo, afterDeployed);","\t\t\t} else {","\t\t\t\tlogger.error('repository update failed', {err: err, appname: repoInfo.name});","\t\t\t\tnotifiers.emit('deploy.failed', repoInfo.name, err);","\t\t\t}","\t\t}","","\t\tfunction afterDeployed(err, deployed) {","\t\t\t","\t\t\tif(!err) {","\t\t\t\tlogger.info('deployment succeded', {appname: repoInfo.name});","\t\t\t\tnotifiers.emit('deploy.success', repoInfo.name);","\t\t\t} else {","\t\t\t\tlogger.error('deployment failed', {appname: repoInfo.name, err: err});","\t\t\t\tnotifiers.emit('deploy.failed', repoInfo.name, err);","\t\t\t}","\t\t}","\t});","","\tthis.listen = function(port, callback) {","","\t\tlogger.info('WebhookListner started', {port: port});","\t\tapp.listen(port, callback);","\t};","","\tthis.close = function() {","\t\tapp.close();","\t};","","\tfunction rawBodyMiddleware(){","\t\t","\t\treturn function rawBodyMiddleware(req, res, next) {","","\t\t\tif ('GET' == req.method || 'HEAD' == req.method) return next();","","\t\t\tvar data = '';","\t\t\treq.setEncoding('utf8');","\t\t\treq.on('data', function(chunk) { data += chunk; });","\t\t\treq.on('end', function(){","\t\t\t\treq.rawBody = data;","\t\t\t\tnext();","\t\t\t});","\t\t}","\t}","}"];
